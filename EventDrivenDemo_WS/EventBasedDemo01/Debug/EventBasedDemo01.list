
EventBasedDemo01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000066c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800079c  0800079c  0001079c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007a8  080007a8  000107b0  2**0
                  CONTENTS
  4 .ARM          00000000  080007a8  080007a8  000107b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a8  080007b0  000107b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a8  080007a8  000107a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007ac  080007ac  000107ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080007b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080007b0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c7c  00000000  00000000  000107d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000485  00000000  00000000  00011455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  000118e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f0  00000000  00000000  00011a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000007bc  00000000  00000000  00011b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000acf  00000000  00000000  000122c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000059fc  00000000  00000000  00012d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001878f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003b0  00000000  00000000  000187e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000784 	.word	0x08000784

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000784 	.word	0x08000784

08000170 <MCAL_AFIO_SelectPort>:
/*================================== #include ==================================*/
#include"Stm32F103_AFIO.h"

/* Function To Select Pin From Line Or Select Port From Line */
void MCAL_AFIO_SelectPort(u8 u8LineNumber, u8 u8PortID)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	if(u8LineNumber <= 3) {
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	2b03      	cmp	r3, #3
 8000184:	d80b      	bhi.n	800019e <MCAL_AFIO_SelectPort+0x2e>
		/* Clear For Safety */
//		MAFIO->EXTICR1 &= ~(0b1111 << (4 * u8LineNumber) );

		MAFIO->EXTICR1 |= (u8PortID << (4 * u8LineNumber) );
 8000186:	4b20      	ldr	r3, [pc, #128]	; (8000208 <MCAL_AFIO_SelectPort+0x98>)
 8000188:	689b      	ldr	r3, [r3, #8]
 800018a:	79b9      	ldrb	r1, [r7, #6]
 800018c:	79fa      	ldrb	r2, [r7, #7]
 800018e:	0092      	lsls	r2, r2, #2
 8000190:	fa01 f202 	lsl.w	r2, r1, r2
 8000194:	4611      	mov	r1, r2
 8000196:	4a1c      	ldr	r2, [pc, #112]	; (8000208 <MCAL_AFIO_SelectPort+0x98>)
 8000198:	430b      	orrs	r3, r1
 800019a:	6093      	str	r3, [r2, #8]
		MAFIO->EXTICR4 |= (u8PortID << (4 * (u8LineNumber - 12)) );
	}
	else {
		/* Do Nothing */
	}
}
 800019c:	e02e      	b.n	80001fc <MCAL_AFIO_SelectPort+0x8c>
	else if(u8LineNumber <= 7) {
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b07      	cmp	r3, #7
 80001a2:	d80c      	bhi.n	80001be <MCAL_AFIO_SelectPort+0x4e>
		MAFIO->EXTICR2 |= (u8PortID << (4 * (u8LineNumber - 4)) );
 80001a4:	4b18      	ldr	r3, [pc, #96]	; (8000208 <MCAL_AFIO_SelectPort+0x98>)
 80001a6:	68db      	ldr	r3, [r3, #12]
 80001a8:	79b9      	ldrb	r1, [r7, #6]
 80001aa:	79fa      	ldrb	r2, [r7, #7]
 80001ac:	3a04      	subs	r2, #4
 80001ae:	0092      	lsls	r2, r2, #2
 80001b0:	fa01 f202 	lsl.w	r2, r1, r2
 80001b4:	4611      	mov	r1, r2
 80001b6:	4a14      	ldr	r2, [pc, #80]	; (8000208 <MCAL_AFIO_SelectPort+0x98>)
 80001b8:	430b      	orrs	r3, r1
 80001ba:	60d3      	str	r3, [r2, #12]
}
 80001bc:	e01e      	b.n	80001fc <MCAL_AFIO_SelectPort+0x8c>
	else if(u8LineNumber <= 11) {
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	2b0b      	cmp	r3, #11
 80001c2:	d80c      	bhi.n	80001de <MCAL_AFIO_SelectPort+0x6e>
		MAFIO->EXTICR3 |= (u8PortID << (4 * (u8LineNumber - 8)) );
 80001c4:	4b10      	ldr	r3, [pc, #64]	; (8000208 <MCAL_AFIO_SelectPort+0x98>)
 80001c6:	691b      	ldr	r3, [r3, #16]
 80001c8:	79b9      	ldrb	r1, [r7, #6]
 80001ca:	79fa      	ldrb	r2, [r7, #7]
 80001cc:	3a08      	subs	r2, #8
 80001ce:	0092      	lsls	r2, r2, #2
 80001d0:	fa01 f202 	lsl.w	r2, r1, r2
 80001d4:	4611      	mov	r1, r2
 80001d6:	4a0c      	ldr	r2, [pc, #48]	; (8000208 <MCAL_AFIO_SelectPort+0x98>)
 80001d8:	430b      	orrs	r3, r1
 80001da:	6113      	str	r3, [r2, #16]
}
 80001dc:	e00e      	b.n	80001fc <MCAL_AFIO_SelectPort+0x8c>
	else if(u8LineNumber <= 15) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b0f      	cmp	r3, #15
 80001e2:	d80b      	bhi.n	80001fc <MCAL_AFIO_SelectPort+0x8c>
		MAFIO->EXTICR4 |= (u8PortID << (4 * (u8LineNumber - 12)) );
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <MCAL_AFIO_SelectPort+0x98>)
 80001e6:	695b      	ldr	r3, [r3, #20]
 80001e8:	79b9      	ldrb	r1, [r7, #6]
 80001ea:	79fa      	ldrb	r2, [r7, #7]
 80001ec:	3a0c      	subs	r2, #12
 80001ee:	0092      	lsls	r2, r2, #2
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	4611      	mov	r1, r2
 80001f6:	4a04      	ldr	r2, [pc, #16]	; (8000208 <MCAL_AFIO_SelectPort+0x98>)
 80001f8:	430b      	orrs	r3, r1
 80001fa:	6153      	str	r3, [r2, #20]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40010000 	.word	0x40010000

0800020c <MCAL_EXTI_Enable>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_EXTI_Enable(u8 u8LineNumber)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
	MEXTI->IMR |= (1 << u8LineNumber);
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <MCAL_EXTI_Enable+0x28>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	79fa      	ldrb	r2, [r7, #7]
 800021c:	2101      	movs	r1, #1
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	4611      	mov	r1, r2
 8000224:	4a03      	ldr	r2, [pc, #12]	; (8000234 <MCAL_EXTI_Enable+0x28>)
 8000226:	430b      	orrs	r3, r1
 8000228:	6013      	str	r3, [r2, #0]
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40010400 	.word	0x40010400

08000238 <MCAL_EXTI_InterruptEdgeType>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_EXTI_InterruptEdgeType(u8 u8LineNumber, u8 u8Edge)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	460a      	mov	r2, r1
 8000242:	71fb      	strb	r3, [r7, #7]
 8000244:	4613      	mov	r3, r2
 8000246:	71bb      	strb	r3, [r7, #6]
	switch(u8Edge)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d017      	beq.n	800027e <MCAL_EXTI_InterruptEdgeType+0x46>
 800024e:	2b01      	cmp	r3, #1
 8000250:	d12b      	bne.n	80002aa <MCAL_EXTI_InterruptEdgeType+0x72>
	{
	/* Rising Edge Trigger Selection */
	case EXTI_R_EDGE:
		MEXTI->RTSR |= (1 << u8LineNumber);
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	79fa      	ldrb	r2, [r7, #7]
 8000258:	2101      	movs	r1, #1
 800025a:	fa01 f202 	lsl.w	r2, r1, r2
 800025e:	4611      	mov	r1, r2
 8000260:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000262:	430b      	orrs	r3, r1
 8000264:	6093      	str	r3, [r2, #8]
		/* Clear The FTSR Corresponding Pin */
		MEXTI->FTSR &= ~(1 << u8LineNumber);		break;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	79fa      	ldrb	r2, [r7, #7]
 800026c:	2101      	movs	r1, #1
 800026e:	fa01 f202 	lsl.w	r2, r1, r2
 8000272:	43d2      	mvns	r2, r2
 8000274:	4611      	mov	r1, r2
 8000276:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000278:	400b      	ands	r3, r1
 800027a:	60d3      	str	r3, [r2, #12]
 800027c:	e016      	b.n	80002ac <MCAL_EXTI_InterruptEdgeType+0x74>
	/* Falling Edge Trigger Selection */
	case EXTI_F_EDGE:
		MEXTI->FTSR |= (1 << u8LineNumber);
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	79fa      	ldrb	r2, [r7, #7]
 8000284:	2101      	movs	r1, #1
 8000286:	fa01 f202 	lsl.w	r2, r1, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 800028e:	430b      	orrs	r3, r1
 8000290:	60d3      	str	r3, [r2, #12]
		/* Clear The RTSR Corresponding Pin */
		MEXTI->RTSR &= ~(1 << u8LineNumber);		break;
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	43d2      	mvns	r2, r2
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002a4:	400b      	ands	r3, r1
 80002a6:	6093      	str	r3, [r2, #8]
 80002a8:	e000      	b.n	80002ac <MCAL_EXTI_InterruptEdgeType+0x74>
	default:										break;
 80002aa:	bf00      	nop
	}
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400

080002bc <MCAL_GPIO_Init>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

extern void MCAL_GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

	u32 TempReg = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7) /* CRL : CR[0] : Pins 0 : 7 */
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	2b07      	cmp	r3, #7
 80002ce:	d846      	bhi.n	800035e <MCAL_GPIO_Init+0xa2>
	{
		/* 1. Configure The Mode of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ) );
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	795b      	ldrb	r3, [r3, #5]
 80002d4:	461a      	mov	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	791b      	ldrb	r3, [r3, #4]
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	fa02 f303 	lsl.w	r3, r2, r3
 80002e0:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /* Clearing Pins */
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	2103      	movs	r1, #3
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	43db      	mvns	r3, r3
 80002f6:	4619      	mov	r1, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	400a      	ands	r2, r1
 80002fe:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	6819      	ldr	r1, [r3, #0]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	430a      	orrs	r2, r1
 800030e:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]

		/* 2. Configure The Configuration of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) + 2) );
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	799b      	ldrb	r3, [r3, #6]
 8000318:	461a      	mov	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	791b      	ldrb	r3, [r3, #4]
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	3302      	adds	r3, #2
 8000322:	fa02 f303 	lsl.w	r3, r2, r3
 8000326:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) + 2) ); /* Clearing Pins */
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	3302      	adds	r3, #2
 8000336:	2103      	movs	r1, #3
 8000338:	fa01 f303 	lsl.w	r3, r1, r3
 800033c:	43db      	mvns	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	400a      	ands	r2, r1
 8000346:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	6819      	ldr	r1, [r3, #0]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	430a      	orrs	r2, r1
 8000356:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[1] |= TempReg;

		TempReg = 0;
	}
}
 800035c:	e04d      	b.n	80003fa <MCAL_GPIO_Init+0x13e>
	else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber >= 8) /* CRH : CR[1] : Pins 8 : 15 */
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	791b      	ldrb	r3, [r3, #4]
 8000362:	2b07      	cmp	r3, #7
 8000364:	d949      	bls.n	80003fa <MCAL_GPIO_Init+0x13e>
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32)  );
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	795b      	ldrb	r3, [r3, #5]
 800036a:	461a      	mov	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	791b      	ldrb	r3, [r3, #4]
 8000370:	3b08      	subs	r3, #8
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	fa02 f303 	lsl.w	r3, r2, r3
 8000378:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32) ); /* Clearing Pins */
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	685a      	ldr	r2, [r3, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	791b      	ldrb	r3, [r3, #4]
 8000384:	3b08      	subs	r3, #8
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	2103      	movs	r1, #3
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	4619      	mov	r1, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	400a      	ands	r2, r1
 8000398:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6859      	ldr	r1, [r3, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	68fa      	ldr	r2, [r7, #12]
 80003a6:	430a      	orrs	r2, r1
 80003a8:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ((4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32 + 2));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	799b      	ldrb	r3, [r3, #6]
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	3b08      	subs	r3, #8
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	3302      	adds	r3, #2
 80003be:	fa02 f303 	lsl.w	r3, r2, r3
 80003c2:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ((4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32 + 2)); /* Clearing Pins */
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	685a      	ldr	r2, [r3, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	791b      	ldrb	r3, [r3, #4]
 80003ce:	3b08      	subs	r3, #8
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	3302      	adds	r3, #2
 80003d4:	2103      	movs	r1, #3
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	43db      	mvns	r3, r3
 80003dc:	4619      	mov	r1, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	400a      	ands	r2, r1
 80003e4:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	6859      	ldr	r1, [r3, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	430a      	orrs	r2, r1
 80003f4:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <MCAL_GPIO_ToggleOutputPin>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

void MCAL_GPIO_ToggleOutputPin(GPIOx_t *pGPIOx, u8 u8PinNumber)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << u8PinNumber);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	78fa      	ldrb	r2, [r7, #3]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	405a      	eors	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	60da      	str	r2, [r3, #12]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <MCAL_GPIO_IRQConfig>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

void MCAL_GPIO_IRQConfig(u8 u8IRQNumber, u8 u8EN_DIS) /* Configuration of NVIC Registers */
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	460a      	mov	r2, r1
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	4613      	mov	r3, r2
 800043a:	71bb      	strb	r3, [r7, #6]
	/* Enable Interrupt */
	if(u8EN_DIS == EXTI_ENABLE)
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d11f      	bne.n	8000482 <MCAL_GPIO_IRQConfig+0x56>
	{
		if((u8IRQNumber >= 0) && (u8IRQNumber <= 31))
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b1f      	cmp	r3, #31
 8000446:	d80a      	bhi.n	800045e <MCAL_GPIO_IRQConfig+0x32>
		{
			NVIC_ISER0 |= (1 << u8IRQNumber);
 8000448:	4b1f      	ldr	r3, [pc, #124]	; (80004c8 <MCAL_GPIO_IRQConfig+0x9c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	79fa      	ldrb	r2, [r7, #7]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <MCAL_GPIO_IRQConfig+0x9c>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6013      	str	r3, [r2, #0]
		else if( (u8IRQNumber >= 32) && (u8IRQNumber <= 63) )
		{
			NVIC_ICER1 |= (1 << u8IRQNumber);
		}
	}
}
 800045c:	e02f      	b.n	80004be <MCAL_GPIO_IRQConfig+0x92>
		else if((u8IRQNumber >= 32) && (u8IRQNumber <= 63))
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b1f      	cmp	r3, #31
 8000462:	d92c      	bls.n	80004be <MCAL_GPIO_IRQConfig+0x92>
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	2b3f      	cmp	r3, #63	; 0x3f
 8000468:	d829      	bhi.n	80004be <MCAL_GPIO_IRQConfig+0x92>
			NVIC_ISER1 |= (1 << (u8IRQNumber - 32));
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MCAL_GPIO_IRQConfig+0xa0>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	79fa      	ldrb	r2, [r7, #7]
 8000470:	3a20      	subs	r2, #32
 8000472:	2101      	movs	r1, #1
 8000474:	fa01 f202 	lsl.w	r2, r1, r2
 8000478:	4611      	mov	r1, r2
 800047a:	4a14      	ldr	r2, [pc, #80]	; (80004cc <MCAL_GPIO_IRQConfig+0xa0>)
 800047c:	430b      	orrs	r3, r1
 800047e:	6013      	str	r3, [r2, #0]
}
 8000480:	e01d      	b.n	80004be <MCAL_GPIO_IRQConfig+0x92>
		if( (u8IRQNumber >= 0) && (u8IRQNumber <= 31) )
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2b1f      	cmp	r3, #31
 8000486:	d80a      	bhi.n	800049e <MCAL_GPIO_IRQConfig+0x72>
			NVIC_ICER0 |= (1 << u8IRQNumber);
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MCAL_GPIO_IRQConfig+0xa4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	79fa      	ldrb	r2, [r7, #7]
 800048e:	2101      	movs	r1, #1
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	4611      	mov	r1, r2
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <MCAL_GPIO_IRQConfig+0xa4>)
 8000498:	430b      	orrs	r3, r1
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	e00f      	b.n	80004be <MCAL_GPIO_IRQConfig+0x92>
		else if( (u8IRQNumber >= 32) && (u8IRQNumber <= 63) )
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b1f      	cmp	r3, #31
 80004a2:	d90c      	bls.n	80004be <MCAL_GPIO_IRQConfig+0x92>
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b3f      	cmp	r3, #63	; 0x3f
 80004a8:	d809      	bhi.n	80004be <MCAL_GPIO_IRQConfig+0x92>
			NVIC_ICER1 |= (1 << u8IRQNumber);
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <MCAL_GPIO_IRQConfig+0xa8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	79fa      	ldrb	r2, [r7, #7]
 80004b0:	2101      	movs	r1, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a06      	ldr	r2, [pc, #24]	; (80004d4 <MCAL_GPIO_IRQConfig+0xa8>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6013      	str	r3, [r2, #0]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	e000e100 	.word	0xe000e100
 80004cc:	e000e104 	.word	0xe000e104
 80004d0:	e000e180 	.word	0xe000e180
 80004d4:	e000e184 	.word	0xe000e184

080004d8 <MCAL_GPIO_IRQHandling>:

/*================================== FUNC_END ==================================*/

/*================================= FUNC_START ================================*/
void MCAL_GPIO_IRQHandling (u8 u8PinNumber)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	/* Check Bit */
//	if( MEXTI->PR & (0x1 << u8PinNumber))
//	{
//		MEXTI->PR |= (1 << u8PinNumber); /* Reset By Setting The Pin */
//	}
	MEXTI->PR |= (1 << u8PinNumber); /* Reset By Setting The Pin */
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <MCAL_GPIO_IRQHandling+0x28>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	79fa      	ldrb	r2, [r7, #7]
 80004e8:	2101      	movs	r1, #1
 80004ea:	fa01 f202 	lsl.w	r2, r1, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a03      	ldr	r2, [pc, #12]	; (8000500 <MCAL_GPIO_IRQHandling+0x28>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6153      	str	r3, [r2, #20]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40010400 	.word	0x40010400

08000504 <SetEvent>:
}Event_t;

/* Declare global variables */
volatile u8 events[NUM_EVENTS] = {0};

void SetEvent(Event_t event) {
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	events[event] = 1;
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4a03      	ldr	r2, [pc, #12]	; (8000520 <SetEvent+0x1c>)
 8000512:	2101      	movs	r1, #1
 8000514:	54d1      	strb	r1, [r2, r3]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	2000001c 	.word	0x2000001c

08000524 <HandleEvent>:

void HandleEvent() {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	if(events[PB1_EV]) {
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HandleEvent+0x38>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d006      	beq.n	8000540 <HandleEvent+0x1c>
		MCAL_GPIO_ToggleOutputPin(MGPIOC, 14);
 8000532:	210e      	movs	r1, #14
 8000534:	480a      	ldr	r0, [pc, #40]	; (8000560 <HandleEvent+0x3c>)
 8000536:	f7ff ff65 	bl	8000404 <MCAL_GPIO_ToggleOutputPin>
		events[PB1_EV] = 0;
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <HandleEvent+0x38>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
	}
	if(events[PB4_EV]) {
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <HandleEvent+0x38>)
 8000542:	785b      	ldrb	r3, [r3, #1]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d006      	beq.n	8000558 <HandleEvent+0x34>
		MCAL_GPIO_ToggleOutputPin(MGPIOC, 15);
 800054a:	210f      	movs	r1, #15
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <HandleEvent+0x3c>)
 800054e:	f7ff ff59 	bl	8000404 <MCAL_GPIO_ToggleOutputPin>
		events[PB4_EV] = 0;
 8000552:	4b02      	ldr	r3, [pc, #8]	; (800055c <HandleEvent+0x38>)
 8000554:	2200      	movs	r2, #0
 8000556:	705a      	strb	r2, [r3, #1]
	}
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000001c 	.word	0x2000001c
 8000560:	40011000 	.word	0x40011000

08000564 <main>:

int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08c      	sub	sp, #48	; 0x30
 8000568:	af00      	add	r7, sp, #0
	/* Activate RCC for GPIOC */
	GPIOA_PCLK_EN();
 800056a:	4b4f      	ldr	r3, [pc, #316]	; (80006a8 <main+0x144>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a4e      	ldr	r2, [pc, #312]	; (80006a8 <main+0x144>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6193      	str	r3, [r2, #24]
	/* Activate RCC for GPIOB */
	GPIOB_PCLK_EN();
 8000576:	4b4c      	ldr	r3, [pc, #304]	; (80006a8 <main+0x144>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a4b      	ldr	r2, [pc, #300]	; (80006a8 <main+0x144>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6193      	str	r3, [r2, #24]
	/* Activate RCC for GPIOC */
	GPIOC_PCLK_EN();
 8000582:	4b49      	ldr	r3, [pc, #292]	; (80006a8 <main+0x144>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a48      	ldr	r2, [pc, #288]	; (80006a8 <main+0x144>)
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	6193      	str	r3, [r2, #24]
	/* AFIO Clock Enable */
	AFIO_PCLK_EN();
 800058e:	4b46      	ldr	r3, [pc, #280]	; (80006a8 <main+0x144>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a45      	ldr	r2, [pc, #276]	; (80006a8 <main+0x144>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]

	/* Configure SW1 (B11) as input */
	GPIO_PinConfig_t PB_B11 = {11, INPUT_MODE, INPUT_PU_PL_MODE};
 800059a:	4a44      	ldr	r2, [pc, #272]	; (80006ac <main+0x148>)
 800059c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005a0:	6812      	ldr	r2, [r2, #0]
 80005a2:	4611      	mov	r1, r2
 80005a4:	8019      	strh	r1, [r3, #0]
 80005a6:	3302      	adds	r3, #2
 80005a8:	0c12      	lsrs	r2, r2, #16
 80005aa:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t PB1 = {MGPIOB, PB_B11};
 80005ac:	4b40      	ldr	r3, [pc, #256]	; (80006b0 <main+0x14c>)
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
 80005b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80005b8:	6812      	ldr	r2, [r2, #0]
 80005ba:	4611      	mov	r1, r2
 80005bc:	8019      	strh	r1, [r3, #0]
 80005be:	3302      	adds	r3, #2
 80005c0:	0c12      	lsrs	r2, r2, #16
 80005c2:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&PB1);
 80005c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe77 	bl	80002bc <MCAL_GPIO_Init>
	/* Configure SW4 (B0) as input */
	GPIO_PinConfig_t PB_B0 = {0, INPUT_MODE, INPUT_PU_PL_MODE};
 80005ce:	2300      	movs	r3, #0
 80005d0:	f887 3020 	strb.w	r3, [r7, #32]
 80005d4:	2300      	movs	r3, #0
 80005d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80005da:	2302      	movs	r3, #2
 80005dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GPIO_Handle_t PB4 = {MGPIOB, PB_B0};
 80005e0:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <main+0x14c>)
 80005e2:	61bb      	str	r3, [r7, #24]
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	f107 0220 	add.w	r2, r7, #32
 80005ec:	6812      	ldr	r2, [r2, #0]
 80005ee:	4611      	mov	r1, r2
 80005f0:	8019      	strh	r1, [r3, #0]
 80005f2:	3302      	adds	r3, #2
 80005f4:	0c12      	lsrs	r2, r2, #16
 80005f6:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&PB4);
 80005f8:	f107 0318 	add.w	r3, r7, #24
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fe5d 	bl	80002bc <MCAL_GPIO_Init>

	/* Configure LED_C14 as output */
	GPIO_PinConfig_t LED_C14 = {14, OUTPUT_10MHZ_MODE, GP_OUTPUT_PU_PL_MODE};
 8000602:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <main+0x150>)
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	6812      	ldr	r2, [r2, #0]
 800060a:	4611      	mov	r1, r2
 800060c:	8019      	strh	r1, [r3, #0]
 800060e:	3302      	adds	r3, #2
 8000610:	0c12      	lsrs	r2, r2, #16
 8000612:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t LED_BLUE = {MGPIOC, LED_C14};
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <main+0x154>)
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	f107 0214 	add.w	r2, r7, #20
 8000620:	6812      	ldr	r2, [r2, #0]
 8000622:	4611      	mov	r1, r2
 8000624:	8019      	strh	r1, [r3, #0]
 8000626:	3302      	adds	r3, #2
 8000628:	0c12      	lsrs	r2, r2, #16
 800062a:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&LED_BLUE);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fe43 	bl	80002bc <MCAL_GPIO_Init>
	/* Configure LED_C15 as output */
	GPIO_PinConfig_t LED_C15 = {15, OUTPUT_10MHZ_MODE, GP_OUTPUT_PU_PL_MODE};
 8000636:	4a21      	ldr	r2, [pc, #132]	; (80006bc <main+0x158>)
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	8019      	strh	r1, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t LED_GREEN = {MGPIOC, LED_C15};
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <main+0x154>)
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	8019      	strh	r1, [r3, #0]
 8000658:	3302      	adds	r3, #2
 800065a:	0c12      	lsrs	r2, r2, #16
 800065c:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&LED_GREEN);
 800065e:	463b      	mov	r3, r7
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fe2b 	bl	80002bc <MCAL_GPIO_Init>

	/*==================== Interrupt Configurations for SW1 ====================*/
	MCAL_GPIO_IRQConfig(40 , EXTI_ENABLE);
 8000666:	2101      	movs	r1, #1
 8000668:	2028      	movs	r0, #40	; 0x28
 800066a:	f7ff fedf 	bl	800042c <MCAL_GPIO_IRQConfig>
	MCAL_AFIO_SelectPort(11, 1); /* Line Number, Port ID */
 800066e:	2101      	movs	r1, #1
 8000670:	200b      	movs	r0, #11
 8000672:	f7ff fd7d 	bl	8000170 <MCAL_AFIO_SelectPort>
	MCAL_EXTI_InterruptEdgeType(11, EXTI_F_EDGE);
 8000676:	2100      	movs	r1, #0
 8000678:	200b      	movs	r0, #11
 800067a:	f7ff fddd 	bl	8000238 <MCAL_EXTI_InterruptEdgeType>
	MCAL_EXTI_Enable(11);
 800067e:	200b      	movs	r0, #11
 8000680:	f7ff fdc4 	bl	800020c <MCAL_EXTI_Enable>
	/*==================== Interrupt Configurations for SW4 ====================*/
	MCAL_GPIO_IRQConfig(6 , EXTI_ENABLE);
 8000684:	2101      	movs	r1, #1
 8000686:	2006      	movs	r0, #6
 8000688:	f7ff fed0 	bl	800042c <MCAL_GPIO_IRQConfig>
	MCAL_AFIO_SelectPort(0, 1); /* Line Number, Port ID */
 800068c:	2101      	movs	r1, #1
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff fd6e 	bl	8000170 <MCAL_AFIO_SelectPort>
	MCAL_EXTI_InterruptEdgeType(0, EXTI_F_EDGE);
 8000694:	2100      	movs	r1, #0
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff fdce 	bl	8000238 <MCAL_EXTI_InterruptEdgeType>
	MCAL_EXTI_Enable(0);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fdb5 	bl	800020c <MCAL_EXTI_Enable>

    /* Loop forever */
	for(;;) {
		HandleEvent();
 80006a2:	f7ff ff3f 	bl	8000524 <HandleEvent>
 80006a6:	e7fc      	b.n	80006a2 <main+0x13e>
 80006a8:	40021000 	.word	0x40021000
 80006ac:	0800079c 	.word	0x0800079c
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	080007a0 	.word	0x080007a0
 80006b8:	40011000 	.word	0x40011000
 80006bc:	080007a4 	.word	0x080007a4

080006c0 <EXTI15_10_IRQHandler>:
	}
}

/* PB1 */
void EXTI15_10_IRQHandler(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	SetEvent(PB1_EV);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ff1d 	bl	8000504 <SetEvent>
	MCAL_GPIO_IRQHandling(GPIO_PIN_NO_11);
 80006ca:	200b      	movs	r0, #11
 80006cc:	f7ff ff04 	bl	80004d8 <MCAL_GPIO_IRQHandling>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <EXTI0_IRQHandler>:

/* PB4 */
void EXTI0_IRQHandler(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	SetEvent(PB4_EV);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff13 	bl	8000504 <SetEvent>
	MCAL_GPIO_IRQHandling(GPIO_PIN_NO_0);
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff fefa 	bl	80004d8 <MCAL_GPIO_IRQHandling>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f2:	490d      	ldr	r1, [pc, #52]	; (8000728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <LoopForever+0xe>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000708:	4c0a      	ldr	r4, [pc, #40]	; (8000734 <LoopForever+0x16>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000716:	f000 f811 	bl	800073c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff ff23 	bl	8000564 <main>

0800071e <LoopForever>:

LoopForever:
  b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   r0, =_estack
 8000720:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800072c:	080007b0 	.word	0x080007b0
  ldr r2, =_sbss
 8000730:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000734:	20000020 	.word	0x20000020

08000738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_2_IRQHandler>
	...

0800073c <__libc_init_array>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	2600      	movs	r6, #0
 8000740:	4d0c      	ldr	r5, [pc, #48]	; (8000774 <__libc_init_array+0x38>)
 8000742:	4c0d      	ldr	r4, [pc, #52]	; (8000778 <__libc_init_array+0x3c>)
 8000744:	1b64      	subs	r4, r4, r5
 8000746:	10a4      	asrs	r4, r4, #2
 8000748:	42a6      	cmp	r6, r4
 800074a:	d109      	bne.n	8000760 <__libc_init_array+0x24>
 800074c:	f000 f81a 	bl	8000784 <_init>
 8000750:	2600      	movs	r6, #0
 8000752:	4d0a      	ldr	r5, [pc, #40]	; (800077c <__libc_init_array+0x40>)
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <__libc_init_array+0x44>)
 8000756:	1b64      	subs	r4, r4, r5
 8000758:	10a4      	asrs	r4, r4, #2
 800075a:	42a6      	cmp	r6, r4
 800075c:	d105      	bne.n	800076a <__libc_init_array+0x2e>
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f855 3b04 	ldr.w	r3, [r5], #4
 8000764:	4798      	blx	r3
 8000766:	3601      	adds	r6, #1
 8000768:	e7ee      	b.n	8000748 <__libc_init_array+0xc>
 800076a:	f855 3b04 	ldr.w	r3, [r5], #4
 800076e:	4798      	blx	r3
 8000770:	3601      	adds	r6, #1
 8000772:	e7f2      	b.n	800075a <__libc_init_array+0x1e>
 8000774:	080007a8 	.word	0x080007a8
 8000778:	080007a8 	.word	0x080007a8
 800077c:	080007a8 	.word	0x080007a8
 8000780:	080007ac 	.word	0x080007ac

08000784 <_init>:
 8000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000786:	bf00      	nop
 8000788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078a:	bc08      	pop	{r3}
 800078c:	469e      	mov	lr, r3
 800078e:	4770      	bx	lr

08000790 <_fini>:
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000792:	bf00      	nop
 8000794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000796:	bc08      	pop	{r3}
 8000798:	469e      	mov	lr, r3
 800079a:	4770      	bx	lr
