
EventBasedDemo01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008a8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009d8  080009d8  000109d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009e4  080009e4  000109ec  2**0
                  CONTENTS
  4 .ARM          00000000  080009e4  080009e4  000109ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009e4  080009ec  000109ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009e4  080009e4  000109e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009e8  080009e8  000109e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080009ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080009ec  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000109ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000117f  00000000  00000000  00010a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000687  00000000  00000000  00011b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00012220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  000123d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001387  00000000  00000000  00012528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e42  00000000  00000000  000138af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005bb1  00000000  00000000  000146f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001a2a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000053c  00000000  00000000  0001a2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080009c0 	.word	0x080009c0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080009c0 	.word	0x080009c0

08000170 <Delay_vMsIn16MHz>:

/*
*		Function To Delay By Milliseconds ( 16MHz CPU CLK )
*/
extern void Delay_vMsIn16MHz(u16 Copy_u16CountNum)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	volatile u16 u16Local_Count1 ;
	volatile u16 u16Local_Count2 ;
	for(u16Local_Count1 = 0; u16Local_Count1 < Copy_u16CountNum; u16Local_Count1++)
 800017a:	2300      	movs	r3, #0
 800017c:	81fb      	strh	r3, [r7, #14]
 800017e:	e012      	b.n	80001a6 <Delay_vMsIn16MHz+0x36>
	for(u16Local_Count2 = 0; u16Local_Count2 < 3180  ; u16Local_Count2++)
 8000180:	2300      	movs	r3, #0
 8000182:	81bb      	strh	r3, [r7, #12]
 8000184:	e004      	b.n	8000190 <Delay_vMsIn16MHz+0x20>
 8000186:	89bb      	ldrh	r3, [r7, #12]
 8000188:	b29b      	uxth	r3, r3
 800018a:	3301      	adds	r3, #1
 800018c:	b29b      	uxth	r3, r3
 800018e:	81bb      	strh	r3, [r7, #12]
 8000190:	89bb      	ldrh	r3, [r7, #12]
 8000192:	b29b      	uxth	r3, r3
 8000194:	f640 426b 	movw	r2, #3179	; 0xc6b
 8000198:	4293      	cmp	r3, r2
 800019a:	d9f4      	bls.n	8000186 <Delay_vMsIn16MHz+0x16>
	for(u16Local_Count1 = 0; u16Local_Count1 < Copy_u16CountNum; u16Local_Count1++)
 800019c:	89fb      	ldrh	r3, [r7, #14]
 800019e:	b29b      	uxth	r3, r3
 80001a0:	3301      	adds	r3, #1
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	81fb      	strh	r3, [r7, #14]
 80001a6:	89fb      	ldrh	r3, [r7, #14]
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	88fa      	ldrh	r2, [r7, #6]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d8e7      	bhi.n	8000180 <Delay_vMsIn16MHz+0x10>
	{} // Do nothing for 1 ms
}
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr

080001bc <MCAL_AFIO_SelectPort>:
/*================================== #include ==================================*/
#include"Stm32F103_AFIO.h"

/* Function To Select Pin From Line Or Select Port From Line */
void MCAL_AFIO_SelectPort(u8 u8LineNumber, u8 u8PortID)
{
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	460a      	mov	r2, r1
 80001c6:	71fb      	strb	r3, [r7, #7]
 80001c8:	4613      	mov	r3, r2
 80001ca:	71bb      	strb	r3, [r7, #6]
	if(u8LineNumber <= 3) {
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	2b03      	cmp	r3, #3
 80001d0:	d817      	bhi.n	8000202 <MCAL_AFIO_SelectPort+0x46>
		/* Clear For Safety */
		MAFIO->EXTICR1 &= ~(0b1111 << (4 * u8LineNumber) );
 80001d2:	4b26      	ldr	r3, [pc, #152]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	79fa      	ldrb	r2, [r7, #7]
 80001d8:	0092      	lsls	r2, r2, #2
 80001da:	210f      	movs	r1, #15
 80001dc:	fa01 f202 	lsl.w	r2, r1, r2
 80001e0:	43d2      	mvns	r2, r2
 80001e2:	4611      	mov	r1, r2
 80001e4:	4a21      	ldr	r2, [pc, #132]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 80001e6:	400b      	ands	r3, r1
 80001e8:	6093      	str	r3, [r2, #8]

		MAFIO->EXTICR1 |= (u8PortID << (4 * u8LineNumber) );
 80001ea:	4b20      	ldr	r3, [pc, #128]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	79b9      	ldrb	r1, [r7, #6]
 80001f0:	79fa      	ldrb	r2, [r7, #7]
 80001f2:	0092      	lsls	r2, r2, #2
 80001f4:	fa01 f202 	lsl.w	r2, r1, r2
 80001f8:	4611      	mov	r1, r2
 80001fa:	4a1c      	ldr	r2, [pc, #112]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 80001fc:	430b      	orrs	r3, r1
 80001fe:	6093      	str	r3, [r2, #8]
		MAFIO->EXTICR4 |= (u8PortID << (4 * (u8LineNumber - 12)) );
	}
	else {
		/* Do Nothing */
	}
}
 8000200:	e02e      	b.n	8000260 <MCAL_AFIO_SelectPort+0xa4>
	else if(u8LineNumber <= 7) {
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	2b07      	cmp	r3, #7
 8000206:	d80c      	bhi.n	8000222 <MCAL_AFIO_SelectPort+0x66>
		MAFIO->EXTICR2 |= (u8PortID << (4 * (u8LineNumber - 4)) );
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	79b9      	ldrb	r1, [r7, #6]
 800020e:	79fa      	ldrb	r2, [r7, #7]
 8000210:	3a04      	subs	r2, #4
 8000212:	0092      	lsls	r2, r2, #2
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	4611      	mov	r1, r2
 800021a:	4a14      	ldr	r2, [pc, #80]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 800021c:	430b      	orrs	r3, r1
 800021e:	60d3      	str	r3, [r2, #12]
}
 8000220:	e01e      	b.n	8000260 <MCAL_AFIO_SelectPort+0xa4>
	else if(u8LineNumber <= 11) {
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	2b0b      	cmp	r3, #11
 8000226:	d80c      	bhi.n	8000242 <MCAL_AFIO_SelectPort+0x86>
		MAFIO->EXTICR3 |= (u8PortID << (4 * (u8LineNumber - 8)) );
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	79b9      	ldrb	r1, [r7, #6]
 800022e:	79fa      	ldrb	r2, [r7, #7]
 8000230:	3a08      	subs	r2, #8
 8000232:	0092      	lsls	r2, r2, #2
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	4611      	mov	r1, r2
 800023a:	4a0c      	ldr	r2, [pc, #48]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 800023c:	430b      	orrs	r3, r1
 800023e:	6113      	str	r3, [r2, #16]
}
 8000240:	e00e      	b.n	8000260 <MCAL_AFIO_SelectPort+0xa4>
	else if(u8LineNumber <= 15) {
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d80b      	bhi.n	8000260 <MCAL_AFIO_SelectPort+0xa4>
		MAFIO->EXTICR4 |= (u8PortID << (4 * (u8LineNumber - 12)) );
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	79b9      	ldrb	r1, [r7, #6]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	3a0c      	subs	r2, #12
 8000252:	0092      	lsls	r2, r2, #2
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	4611      	mov	r1, r2
 800025a:	4a04      	ldr	r2, [pc, #16]	; (800026c <MCAL_AFIO_SelectPort+0xb0>)
 800025c:	430b      	orrs	r3, r1
 800025e:	6153      	str	r3, [r2, #20]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40010000 	.word	0x40010000

08000270 <MCAL_EXTI_Enable>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_EXTI_Enable(u8 u8LineNumber)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	MEXTI->IMR |= (1 << u8LineNumber);
 800027a:	4b07      	ldr	r3, [pc, #28]	; (8000298 <MCAL_EXTI_Enable+0x28>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2101      	movs	r1, #1
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	4611      	mov	r1, r2
 8000288:	4a03      	ldr	r2, [pc, #12]	; (8000298 <MCAL_EXTI_Enable+0x28>)
 800028a:	430b      	orrs	r3, r1
 800028c:	6013      	str	r3, [r2, #0]
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40010400 	.word	0x40010400

0800029c <MCAL_EXTI_InterruptEdgeType>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_EXTI_InterruptEdgeType(u8 u8LineNumber, u8 u8Edge)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	460a      	mov	r2, r1
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	4613      	mov	r3, r2
 80002aa:	71bb      	strb	r3, [r7, #6]
	switch(u8Edge)
 80002ac:	79bb      	ldrb	r3, [r7, #6]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d017      	beq.n	80002e2 <MCAL_EXTI_InterruptEdgeType+0x46>
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d12b      	bne.n	800030e <MCAL_EXTI_InterruptEdgeType+0x72>
	{
	/* Rising Edge Trigger Selection */
	case EXTI_R_EDGE:
		MEXTI->RTSR |= (1 << u8LineNumber);
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	2101      	movs	r1, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	4611      	mov	r1, r2
 80002c4:	4a15      	ldr	r2, [pc, #84]	; (800031c <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002c6:	430b      	orrs	r3, r1
 80002c8:	6093      	str	r3, [r2, #8]
		/* Clear The FTSR Corresponding Pin */
		MEXTI->FTSR &= ~(1 << u8LineNumber);		break;
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	2101      	movs	r1, #1
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	43d2      	mvns	r2, r2
 80002d8:	4611      	mov	r1, r2
 80002da:	4a10      	ldr	r2, [pc, #64]	; (800031c <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002dc:	400b      	ands	r3, r1
 80002de:	60d3      	str	r3, [r2, #12]
 80002e0:	e016      	b.n	8000310 <MCAL_EXTI_InterruptEdgeType+0x74>
	/* Falling Edge Trigger Selection */
	case EXTI_F_EDGE:
		MEXTI->FTSR |= (1 << u8LineNumber);
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	2101      	movs	r1, #1
 80002ea:	fa01 f202 	lsl.w	r2, r1, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a0a      	ldr	r2, [pc, #40]	; (800031c <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002f2:	430b      	orrs	r3, r1
 80002f4:	60d3      	str	r3, [r2, #12]
		/* Clear The RTSR Corresponding Pin */
		MEXTI->RTSR &= ~(1 << u8LineNumber);		break;
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	79fa      	ldrb	r2, [r7, #7]
 80002fc:	2101      	movs	r1, #1
 80002fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000302:	43d2      	mvns	r2, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4a05      	ldr	r2, [pc, #20]	; (800031c <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000308:	400b      	ands	r3, r1
 800030a:	6093      	str	r3, [r2, #8]
 800030c:	e000      	b.n	8000310 <MCAL_EXTI_InterruptEdgeType+0x74>
	default:										break;
 800030e:	bf00      	nop
	}
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400

08000320 <MCAL_GPIO_Init>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

extern void MCAL_GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]

	u32 TempReg = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7) /* CRL : CR[0] : Pins 0 : 7 */
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	791b      	ldrb	r3, [r3, #4]
 8000330:	2b07      	cmp	r3, #7
 8000332:	d846      	bhi.n	80003c2 <MCAL_GPIO_Init+0xa2>
	{
		/* 1. Configure The Mode of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ) );
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	795b      	ldrb	r3, [r3, #5]
 8000338:	461a      	mov	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	791b      	ldrb	r3, [r3, #4]
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	fa02 f303 	lsl.w	r3, r2, r3
 8000344:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /* Clearing Pins */
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	2103      	movs	r1, #3
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	4619      	mov	r1, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	400a      	ands	r2, r1
 8000362:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6819      	ldr	r1, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	430a      	orrs	r2, r1
 8000372:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]

		/* 2. Configure The Configuration of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) + 2) );
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	799b      	ldrb	r3, [r3, #6]
 800037c:	461a      	mov	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	791b      	ldrb	r3, [r3, #4]
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	3302      	adds	r3, #2
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) + 2) ); /* Clearing Pins */
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	3302      	adds	r3, #2
 800039a:	2103      	movs	r1, #3
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	400a      	ands	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	6819      	ldr	r1, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[1] |= TempReg;

		TempReg = 0;
	}
}
 80003c0:	e04b      	b.n	800045a <MCAL_GPIO_Init+0x13a>
	else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber >= 8) /* CRH : CR[1] : Pins 8 : 15 */
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	791b      	ldrb	r3, [r3, #4]
 80003c6:	2b07      	cmp	r3, #7
 80003c8:	d947      	bls.n	800045a <MCAL_GPIO_Init+0x13a>
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32) ) );
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	461a      	mov	r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	791b      	ldrb	r3, [r3, #4]
 80003d4:	3b08      	subs	r3, #8
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	fa02 f303 	lsl.w	r3, r2, r3
 80003dc:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32) ); /* Clearing Pins */
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	685a      	ldr	r2, [r3, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	791b      	ldrb	r3, [r3, #4]
 80003e8:	3b08      	subs	r3, #8
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	4619      	mov	r1, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	400a      	ands	r2, r1
 80003fc:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	6859      	ldr	r1, [r3, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	430a      	orrs	r2, r1
 800040c:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ( ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) + 2) - 32) );
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	799b      	ldrb	r3, [r3, #6]
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	3b1e      	subs	r3, #30
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ( ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) + 2) - 32) ); /* Clearing Pins */
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	685a      	ldr	r2, [r3, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	791b      	ldrb	r3, [r3, #4]
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	3b1e      	subs	r3, #30
 8000434:	2103      	movs	r1, #3
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	4619      	mov	r1, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	400a      	ands	r2, r1
 8000444:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	6859      	ldr	r1, [r3, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	430a      	orrs	r2, r1
 8000454:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
}
 800045a:	bf00      	nop
 800045c:	3714      	adds	r7, #20
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <MCAL_GPIO_WriteOutputPin>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

void MCAL_GPIO_WriteOutputPin(GPIOx_t *pGPIOx, u8 u8PinNumber, u8 u8Value)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	70fb      	strb	r3, [r7, #3]
 8000470:	4613      	mov	r3, r2
 8000472:	70bb      	strb	r3, [r7, #2]
	if(u8Value == GPIO_PIN_SET)
 8000474:	78bb      	ldrb	r3, [r7, #2]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d107      	bne.n	800048a <MCAL_GPIO_WriteOutputPin+0x26>
	{
		pGPIOx->BSRR = (1 << u8PinNumber);
 800047a:	78fb      	ldrb	r3, [r7, #3]
 800047c:	2201      	movs	r2, #1
 800047e:	fa02 f303 	lsl.w	r3, r2, r3
 8000482:	461a      	mov	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	611a      	str	r2, [r3, #16]
	}
	else if (u8Value == GPIO_PIN_RESET)
	{
		pGPIOx->BSRR = (1 << (u8PinNumber + 16) );
	}
}
 8000488:	e00a      	b.n	80004a0 <MCAL_GPIO_WriteOutputPin+0x3c>
	else if (u8Value == GPIO_PIN_RESET)
 800048a:	78bb      	ldrb	r3, [r7, #2]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d107      	bne.n	80004a0 <MCAL_GPIO_WriteOutputPin+0x3c>
		pGPIOx->BSRR = (1 << (u8PinNumber + 16) );
 8000490:	78fb      	ldrb	r3, [r7, #3]
 8000492:	3310      	adds	r3, #16
 8000494:	2201      	movs	r2, #1
 8000496:	fa02 f303 	lsl.w	r3, r2, r3
 800049a:	461a      	mov	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	611a      	str	r2, [r3, #16]
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
	...

080004ac <MCAL_GPIO_IRQConfig>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

void MCAL_GPIO_IRQConfig(u8 u8IRQNumber, u8 u8EN_DIS) /* Configuration of NVIC Registers */
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	460a      	mov	r2, r1
 80004b6:	71fb      	strb	r3, [r7, #7]
 80004b8:	4613      	mov	r3, r2
 80004ba:	71bb      	strb	r3, [r7, #6]
	/* Enable Interrupt */
	if(u8EN_DIS == EXTI_ENABLE)
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d11f      	bne.n	8000502 <MCAL_GPIO_IRQConfig+0x56>
	{
		if( (u8IRQNumber >= 0) && (u8IRQNumber <= 31) )
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b1f      	cmp	r3, #31
 80004c6:	d80a      	bhi.n	80004de <MCAL_GPIO_IRQConfig+0x32>
		{
			NVIC_ISER0 |= (1 << u8IRQNumber);
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <MCAL_GPIO_IRQConfig+0x9c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	79fa      	ldrb	r2, [r7, #7]
 80004ce:	2101      	movs	r1, #1
 80004d0:	fa01 f202 	lsl.w	r2, r1, r2
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <MCAL_GPIO_IRQConfig+0x9c>)
 80004d8:	430b      	orrs	r3, r1
 80004da:	6013      	str	r3, [r2, #0]
		else if( (u8IRQNumber >= 32) && (u8IRQNumber <= 63) )
		{
			NVIC_ICER1 |= (1 << u8IRQNumber);
		}
	}
}
 80004dc:	e02f      	b.n	800053e <MCAL_GPIO_IRQConfig+0x92>
		else if( (u8IRQNumber >= 32) && (u8IRQNumber <= 63) )
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b1f      	cmp	r3, #31
 80004e2:	d92c      	bls.n	800053e <MCAL_GPIO_IRQConfig+0x92>
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	2b3f      	cmp	r3, #63	; 0x3f
 80004e8:	d829      	bhi.n	800053e <MCAL_GPIO_IRQConfig+0x92>
			NVIC_ISER1 |= (1 << (u8IRQNumber - 32));
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <MCAL_GPIO_IRQConfig+0xa0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	79fa      	ldrb	r2, [r7, #7]
 80004f0:	3a20      	subs	r2, #32
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f202 	lsl.w	r2, r1, r2
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a14      	ldr	r2, [pc, #80]	; (800054c <MCAL_GPIO_IRQConfig+0xa0>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	6013      	str	r3, [r2, #0]
}
 8000500:	e01d      	b.n	800053e <MCAL_GPIO_IRQConfig+0x92>
		if( (u8IRQNumber >= 0) && (u8IRQNumber <= 31) )
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b1f      	cmp	r3, #31
 8000506:	d80a      	bhi.n	800051e <MCAL_GPIO_IRQConfig+0x72>
			NVIC_ICER0 |= (1 << u8IRQNumber);
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MCAL_GPIO_IRQConfig+0xa4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	2101      	movs	r1, #1
 8000510:	fa01 f202 	lsl.w	r2, r1, r2
 8000514:	4611      	mov	r1, r2
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <MCAL_GPIO_IRQConfig+0xa4>)
 8000518:	430b      	orrs	r3, r1
 800051a:	6013      	str	r3, [r2, #0]
}
 800051c:	e00f      	b.n	800053e <MCAL_GPIO_IRQConfig+0x92>
		else if( (u8IRQNumber >= 32) && (u8IRQNumber <= 63) )
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b1f      	cmp	r3, #31
 8000522:	d90c      	bls.n	800053e <MCAL_GPIO_IRQConfig+0x92>
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b3f      	cmp	r3, #63	; 0x3f
 8000528:	d809      	bhi.n	800053e <MCAL_GPIO_IRQConfig+0x92>
			NVIC_ICER1 |= (1 << u8IRQNumber);
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <MCAL_GPIO_IRQConfig+0xa8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	2101      	movs	r1, #1
 8000532:	fa01 f202 	lsl.w	r2, r1, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <MCAL_GPIO_IRQConfig+0xa8>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	e000e100 	.word	0xe000e100
 800054c:	e000e104 	.word	0xe000e104
 8000550:	e000e180 	.word	0xe000e180
 8000554:	e000e184 	.word	0xe000e184

08000558 <MCAL_GPIO_IRQHandling>:

/*================================== FUNC_END ==================================*/

/*================================= FUNC_START ================================*/
void MCAL_GPIO_IRQHandling (u8 u8PinNumber)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	/* Check Bit */
	if( MEXTI->PR & ( 0x1 << u8PinNumber ) )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MCAL_GPIO_IRQHandling+0x3c>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	79fa      	ldrb	r2, [r7, #7]
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	4013      	ands	r3, r2
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <MCAL_GPIO_IRQHandling+0x30>
	{
		MEXTI->PR |= ( 0x1 << u8PinNumber ); /* Reset By Setting The Pin */
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <MCAL_GPIO_IRQHandling+0x3c>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	79fa      	ldrb	r2, [r7, #7]
 800057a:	2101      	movs	r1, #1
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	4611      	mov	r1, r2
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <MCAL_GPIO_IRQHandling+0x3c>)
 8000584:	430b      	orrs	r3, r1
 8000586:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/* Do Nothing */
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40010400 	.word	0x40010400

08000598 <HAL_LCD_LCDInit>:
 * The E pin (for “Enable”) starts a read/write operation and will be discussed in the next section. */

/*============================================   Start_Function   ============================================*/

extern void HAL_LCD_LCDInit(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
#elif LCD_MODE == _4_BIT_MODE

	GPIO_Handle_t LCD_D4, LCD_D5, LCD_D6, LCD_D7, LCD_EN, LCD_RS;

	/* Data Pins Configuration */
	LCD_D4.pGPIOx = LCD_DATA_PORT;
 800059e:	4b34      	ldr	r3, [pc, #208]	; (8000670 <HAL_LCD_LCDInit+0xd8>)
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
	LCD_D5.pGPIOx = LCD_DATA_PORT;
 80005a2:	4b33      	ldr	r3, [pc, #204]	; (8000670 <HAL_LCD_LCDInit+0xd8>)
 80005a4:	623b      	str	r3, [r7, #32]
	LCD_D6.pGPIOx = LCD_DATA_PORT;
 80005a6:	4b32      	ldr	r3, [pc, #200]	; (8000670 <HAL_LCD_LCDInit+0xd8>)
 80005a8:	61bb      	str	r3, [r7, #24]
	LCD_D7.pGPIOx = LCD_DATA_PORT;
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <HAL_LCD_LCDInit+0xd8>)
 80005ac:	613b      	str	r3, [r7, #16]

	LCD_D4.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA4_PIN;
 80005ae:	230f      	movs	r3, #15
 80005b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	LCD_D5.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA5_PIN;
 80005b4:	230e      	movs	r3, #14
 80005b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	LCD_D6.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA6_PIN;
 80005ba:	230d      	movs	r3, #13
 80005bc:	773b      	strb	r3, [r7, #28]
	LCD_D7.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA7_PIN;
 80005be:	230c      	movs	r3, #12
 80005c0:	753b      	strb	r3, [r7, #20]

	LCD_D4.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	LCD_D5.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	LCD_D6.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 80005ce:	2301      	movs	r3, #1
 80005d0:	777b      	strb	r3, [r7, #29]
	LCD_D7.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	757b      	strb	r3, [r7, #21]

	LCD_D4.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	LCD_D5.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	LCD_D6.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	77bb      	strb	r3, [r7, #30]
	LCD_D7.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	75bb      	strb	r3, [r7, #22]

	MCAL_GPIO_Init(&LCD_D4);
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe96 	bl	8000320 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_D5);
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fe91 	bl	8000320 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_D6);
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe8c 	bl	8000320 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_D7);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fe87 	bl	8000320 <MCAL_GPIO_Init>

	/* Control Pins Configuration */
	LCD_EN.pGPIOx = LCD_CTRL_PORT;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_LCD_LCDInit+0xdc>)
 8000614:	60bb      	str	r3, [r7, #8]
	LCD_RS.pGPIOx = LCD_CTRL_PORT;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <HAL_LCD_LCDInit+0xdc>)
 8000618:	603b      	str	r3, [r7, #0]

	LCD_EN.GPIO_PinConfig.GPIO_PinNumber = LCD_EN_PIN;
 800061a:	2308      	movs	r3, #8
 800061c:	733b      	strb	r3, [r7, #12]
	LCD_RS.GPIO_PinConfig.GPIO_PinNumber = LCD_RS_PIN;
 800061e:	230b      	movs	r3, #11
 8000620:	713b      	strb	r3, [r7, #4]

	LCD_EN.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 8000622:	2301      	movs	r3, #1
 8000624:	737b      	strb	r3, [r7, #13]
	LCD_RS.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 8000626:	2301      	movs	r3, #1
 8000628:	717b      	strb	r3, [r7, #5]

	LCD_EN.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 800062a:	2300      	movs	r3, #0
 800062c:	73bb      	strb	r3, [r7, #14]
	LCD_RS.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 800062e:	2300      	movs	r3, #0
 8000630:	71bb      	strb	r3, [r7, #6]

	MCAL_GPIO_Init(&LCD_EN);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fe72 	bl	8000320 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_RS);
 800063c:	463b      	mov	r3, r7
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fe6e 	bl	8000320 <MCAL_GPIO_Init>

//	Delay_vMsIn16MHz(1000); //500

	HAL_LCD_LCDWriteCommand(_4_BIT_MODE_COMAND_1);
 8000644:	2033      	movs	r0, #51	; 0x33
 8000646:	f000 f817 	bl	8000678 <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(_4_BIT_MODE_COMAND_2);
 800064a:	2032      	movs	r0, #50	; 0x32
 800064c:	f000 f814 	bl	8000678 <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(_4_BIT_MODE_COMAND_3);
 8000650:	2028      	movs	r0, #40	; 0x28
 8000652:	f000 f811 	bl	8000678 <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(DISPLAY_ON_CURSOR_OFF);
 8000656:	200c      	movs	r0, #12
 8000658:	f000 f80e 	bl	8000678 <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(LCD_RETURN_HOME);
 800065c:	2002      	movs	r0, #2
 800065e:	f000 f80b 	bl	8000678 <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(LCD_CLEAR);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f808 	bl	8000678 <HAL_LCD_LCDWriteCommand>
#endif
}
 8000668:	bf00      	nop
 800066a:	3730      	adds	r7, #48	; 0x30
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40010c00 	.word	0x40010c00
 8000674:	40010800 	.word	0x40010800

08000678 <HAL_LCD_LCDWriteCommand>:
/*============================================   End_Function     ============================================*/
/*============================================   Start_Function   ============================================*/

void HAL_LCD_LCDWriteCommand(u8 u8Command)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]

	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
 8000682:	2200      	movs	r2, #0
 8000684:	210b      	movs	r1, #11
 8000686:	483d      	ldr	r0, [pc, #244]	; (800077c <HAL_LCD_LCDWriteCommand+0x104>)
 8000688:	f7ff feec 	bl	8000464 <MCAL_GPIO_WriteOutputPin>

#if LCD_MODE ==_8_BIT_MODE

#elif LCD_MODE ==_4_BIT_MODE

	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, GET_BIT(u8Command, 4) );
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	091b      	lsrs	r3, r3, #4
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	461a      	mov	r2, r3
 800069a:	210f      	movs	r1, #15
 800069c:	4838      	ldr	r0, [pc, #224]	; (8000780 <HAL_LCD_LCDWriteCommand+0x108>)
 800069e:	f7ff fee1 	bl	8000464 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, GET_BIT(u8Command, 5) );
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	095b      	lsrs	r3, r3, #5
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	210e      	movs	r1, #14
 80006b2:	4833      	ldr	r0, [pc, #204]	; (8000780 <HAL_LCD_LCDWriteCommand+0x108>)
 80006b4:	f7ff fed6 	bl	8000464 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, GET_BIT(u8Command, 6) );
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	099b      	lsrs	r3, r3, #6
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	210d      	movs	r1, #13
 80006c8:	482d      	ldr	r0, [pc, #180]	; (8000780 <HAL_LCD_LCDWriteCommand+0x108>)
 80006ca:	f7ff fecb 	bl	8000464 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA7_PIN, GET_BIT(u8Command, 7) );
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	09db      	lsrs	r3, r3, #7
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	210c      	movs	r1, #12
 80006d8:	4829      	ldr	r0, [pc, #164]	; (8000780 <HAL_LCD_LCDWriteCommand+0x108>)
 80006da:	f7ff fec3 	bl	8000464 <MCAL_GPIO_WriteOutputPin>
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, u8Command & (u8)(1 << 6) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, u8Command & (u8)(1 << 5) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, u8Command & (u8)(1 << 4) );


	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
 80006de:	2201      	movs	r2, #1
 80006e0:	2108      	movs	r1, #8
 80006e2:	4826      	ldr	r0, [pc, #152]	; (800077c <HAL_LCD_LCDWriteCommand+0x104>)
 80006e4:	f7ff febe 	bl	8000464 <MCAL_GPIO_WriteOutputPin>

	Delay_vMsIn16MHz(1); //1
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff fd41 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2108      	movs	r1, #8
 80006f2:	4822      	ldr	r0, [pc, #136]	; (800077c <HAL_LCD_LCDWriteCommand+0x104>)
 80006f4:	f7ff feb6 	bl	8000464 <MCAL_GPIO_WriteOutputPin>

	Delay_vMsIn16MHz(1); //1
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff fd39 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, GET_BIT(u8Command, 0) );
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	461a      	mov	r2, r3
 8000708:	210f      	movs	r1, #15
 800070a:	481d      	ldr	r0, [pc, #116]	; (8000780 <HAL_LCD_LCDWriteCommand+0x108>)
 800070c:	f7ff feaa 	bl	8000464 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, GET_BIT(u8Command, 1) );
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	085b      	lsrs	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	210e      	movs	r1, #14
 8000720:	4817      	ldr	r0, [pc, #92]	; (8000780 <HAL_LCD_LCDWriteCommand+0x108>)
 8000722:	f7ff fe9f 	bl	8000464 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, GET_BIT(u8Command, 2) );
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	089b      	lsrs	r3, r3, #2
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	210d      	movs	r1, #13
 8000736:	4812      	ldr	r0, [pc, #72]	; (8000780 <HAL_LCD_LCDWriteCommand+0x108>)
 8000738:	f7ff fe94 	bl	8000464 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA7_PIN, GET_BIT(u8Command, 3) );
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	210c      	movs	r1, #12
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <HAL_LCD_LCDWriteCommand+0x108>)
 800074e:	f7ff fe89 	bl	8000464 <MCAL_GPIO_WriteOutputPin>
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, u8Command & (u8)(1 << 2) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, u8Command & (u8)(1 << 1) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, u8Command & (u8)(1 << 0) );


	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
 8000752:	2201      	movs	r2, #1
 8000754:	2108      	movs	r1, #8
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_LCD_LCDWriteCommand+0x104>)
 8000758:	f7ff fe84 	bl	8000464 <MCAL_GPIO_WriteOutputPin>

	Delay_vMsIn16MHz(1); //1
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fd07 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
 8000762:	2200      	movs	r2, #0
 8000764:	2108      	movs	r1, #8
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <HAL_LCD_LCDWriteCommand+0x104>)
 8000768:	f7ff fe7c 	bl	8000464 <MCAL_GPIO_WriteOutputPin>
#endif
	Delay_vMsIn16MHz(5); //5
 800076c:	2005      	movs	r0, #5
 800076e:	f7ff fcff 	bl	8000170 <Delay_vMsIn16MHz>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40010800 	.word	0x40010800
 8000780:	40010c00 	.word	0x40010c00

08000784 <SetEvent>:
			MCAL_GPIO_ToggleOutputPin(MGPIOA, 2);
		}
	}
}

void SetEvent(u8 eventNum) {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	if(eventNum == PB1_EV) {
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d103      	bne.n	800079c <SetEvent+0x18>
		events[0] = '1';
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <SetEvent+0x30>)
 8000796:	2231      	movs	r2, #49	; 0x31
 8000798:	701a      	strb	r2, [r3, #0]
	}
	else if(eventNum == PB2_EV) {
		events[1] = '1';
	}
}
 800079a:	e005      	b.n	80007a8 <SetEvent+0x24>
	else if(eventNum == PB2_EV) {
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d102      	bne.n	80007a8 <SetEvent+0x24>
		events[1] = '1';
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SetEvent+0x30>)
 80007a4:	2231      	movs	r2, #49	; 0x31
 80007a6:	705a      	strb	r2, [r3, #1]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	2000001c 	.word	0x2000001c

080007b8 <main>:
{
	for(u32 i = 0; i < 500000 / 2; i++);
}

int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
	/* Activate RCC for GPIOC */
	GPIOA_PCLK_EN();
 80007be:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <main+0x128>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a47      	ldr	r2, [pc, #284]	; (80008e0 <main+0x128>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6193      	str	r3, [r2, #24]
	/* Activate RCC for GPIOB */
	GPIOB_PCLK_EN();
 80007ca:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <main+0x128>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a44      	ldr	r2, [pc, #272]	; (80008e0 <main+0x128>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6193      	str	r3, [r2, #24]
	/* Activate RCC for GPIOC */
	GPIOC_PCLK_EN();
 80007d6:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <main+0x128>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a41      	ldr	r2, [pc, #260]	; (80008e0 <main+0x128>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6193      	str	r3, [r2, #24]

	/* Initialize LCD */
	HAL_LCD_LCDInit();
 80007e2:	f7ff fed9 	bl	8000598 <HAL_LCD_LCDInit>

	/* Configure SW1 (B11) as input */
	GPIO_PinConfig_t PB_B11 = {11, INPUT_MODE, INPUT_PU_PL_MODE};
 80007e6:	4a3f      	ldr	r2, [pc, #252]	; (80008e4 <main+0x12c>)
 80007e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	4611      	mov	r1, r2
 80007f0:	8019      	strh	r1, [r3, #0]
 80007f2:	3302      	adds	r3, #2
 80007f4:	0c12      	lsrs	r2, r2, #16
 80007f6:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t SW1 = {MGPIOB, PB_B11};
 80007f8:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <main+0x130>)
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
 80007fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000800:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	4611      	mov	r1, r2
 8000808:	8019      	strh	r1, [r3, #0]
 800080a:	3302      	adds	r3, #2
 800080c:	0c12      	lsrs	r2, r2, #16
 800080e:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&SW1);
 8000810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fd83 	bl	8000320 <MCAL_GPIO_Init>

	/* Configure SW1 (B0) as input */
	GPIO_PinConfig_t PB_B0 = {0, INPUT_MODE, INPUT_PU_PL_MODE};
 800081a:	2300      	movs	r3, #0
 800081c:	f887 3020 	strb.w	r3, [r7, #32]
 8000820:	2300      	movs	r3, #0
 8000822:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000826:	2302      	movs	r3, #2
 8000828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GPIO_Handle_t SW2 = {MGPIOB, PB_B0};
 800082c:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <main+0x130>)
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	f107 0220 	add.w	r2, r7, #32
 8000838:	6812      	ldr	r2, [r2, #0]
 800083a:	4611      	mov	r1, r2
 800083c:	8019      	strh	r1, [r3, #0]
 800083e:	3302      	adds	r3, #2
 8000840:	0c12      	lsrs	r2, r2, #16
 8000842:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&SW2);
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fd69 	bl	8000320 <MCAL_GPIO_Init>

	GPIO_PinConfig_t LED_C14 = {14, OUTPUT_10MHZ_MODE, GP_OUTPUT_PU_PL_MODE};
 800084e:	4a27      	ldr	r2, [pc, #156]	; (80008ec <main+0x134>)
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	4611      	mov	r1, r2
 8000858:	8019      	strh	r1, [r3, #0]
 800085a:	3302      	adds	r3, #2
 800085c:	0c12      	lsrs	r2, r2, #16
 800085e:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t LED_BLUE = {MGPIOC, LED_C14};
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <main+0x138>)
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	f107 0214 	add.w	r2, r7, #20
 800086c:	6812      	ldr	r2, [r2, #0]
 800086e:	4611      	mov	r1, r2
 8000870:	8019      	strh	r1, [r3, #0]
 8000872:	3302      	adds	r3, #2
 8000874:	0c12      	lsrs	r2, r2, #16
 8000876:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&LED_BLUE);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fd4f 	bl	8000320 <MCAL_GPIO_Init>

	GPIO_PinConfig_t LED_A2 = {2, OUTPUT_10MHZ_MODE, GP_OUTPUT_PU_PL_MODE};
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <main+0x13c>)
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	6812      	ldr	r2, [r2, #0]
 800088a:	4611      	mov	r1, r2
 800088c:	8019      	strh	r1, [r3, #0]
 800088e:	3302      	adds	r3, #2
 8000890:	0c12      	lsrs	r2, r2, #16
 8000892:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t LED_RED1 = {MGPIOA, LED_A2};
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <main+0x140>)
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	f107 0208 	add.w	r2, r7, #8
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	4611      	mov	r1, r2
 80008a2:	8019      	strh	r1, [r3, #0]
 80008a4:	3302      	adds	r3, #2
 80008a6:	0c12      	lsrs	r2, r2, #16
 80008a8:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&LED_RED1);
 80008aa:	463b      	mov	r3, r7
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fd37 	bl	8000320 <MCAL_GPIO_Init>

	/*==================== Interrupt Configurations for SW1 ====================*/
	AFIO_PCLK_EN();	/* AFIO Clock Enable */
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <main+0x128>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <main+0x128>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
	MCAL_AFIO_SelectPort(11, 1); /* Line Number, Port ID */
 80008be:	2101      	movs	r1, #1
 80008c0:	200b      	movs	r0, #11
 80008c2:	f7ff fc7b 	bl	80001bc <MCAL_AFIO_SelectPort>
	MCAL_EXTI_InterruptEdgeType(11, EXTI_F_EDGE);
 80008c6:	2100      	movs	r1, #0
 80008c8:	200b      	movs	r0, #11
 80008ca:	f7ff fce7 	bl	800029c <MCAL_EXTI_InterruptEdgeType>
	MCAL_GPIO_IRQConfig(40 , EXTI_ENABLE);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f7ff fdeb 	bl	80004ac <MCAL_GPIO_IRQConfig>
	MCAL_EXTI_Enable(11);
 80008d6:	200b      	movs	r0, #11
 80008d8:	f7ff fcca 	bl	8000270 <MCAL_EXTI_Enable>
//	HAL_LCD_LCDClear();
//	u8 string[] = "Hello System";
//	HAL_LCD_LCDWriteString(string);

    /* Loop forever */
	for(;;) {}
 80008dc:	e7fe      	b.n	80008dc <main+0x124>
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	080009d8 	.word	0x080009d8
 80008e8:	40010c00 	.word	0x40010c00
 80008ec:	080009dc 	.word	0x080009dc
 80008f0:	40011000 	.word	0x40011000
 80008f4:	080009e0 	.word	0x080009e0
 80008f8:	40010800 	.word	0x40010800

080008fc <EXTI15_10_IRQHandler>:
}

void EXTI15_10_IRQHandler(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	MCAL_GPIO_IRQHandling(GPIO_PIN_NO_11);
 8000900:	200b      	movs	r0, #11
 8000902:	f7ff fe29 	bl	8000558 <MCAL_GPIO_IRQHandling>
	SetEvent(PB1_EV);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ff3c 	bl	8000784 <SetEvent>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	MCAL_GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fe1f 	bl	8000558 <MCAL_GPIO_IRQHandling>
	SetEvent(PB2_EV);
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff ff32 	bl	8000784 <SetEvent>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000952:	f000 f811 	bl	8000978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff ff2f 	bl	80007b8 <main>

0800095a <LoopForever>:

LoopForever:
  b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000968:	080009ec 	.word	0x080009ec
  ldr r2, =_sbss
 800096c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000970:	20000020 	.word	0x20000020

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <__libc_init_array>:
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	2600      	movs	r6, #0
 800097c:	4d0c      	ldr	r5, [pc, #48]	; (80009b0 <__libc_init_array+0x38>)
 800097e:	4c0d      	ldr	r4, [pc, #52]	; (80009b4 <__libc_init_array+0x3c>)
 8000980:	1b64      	subs	r4, r4, r5
 8000982:	10a4      	asrs	r4, r4, #2
 8000984:	42a6      	cmp	r6, r4
 8000986:	d109      	bne.n	800099c <__libc_init_array+0x24>
 8000988:	f000 f81a 	bl	80009c0 <_init>
 800098c:	2600      	movs	r6, #0
 800098e:	4d0a      	ldr	r5, [pc, #40]	; (80009b8 <__libc_init_array+0x40>)
 8000990:	4c0a      	ldr	r4, [pc, #40]	; (80009bc <__libc_init_array+0x44>)
 8000992:	1b64      	subs	r4, r4, r5
 8000994:	10a4      	asrs	r4, r4, #2
 8000996:	42a6      	cmp	r6, r4
 8000998:	d105      	bne.n	80009a6 <__libc_init_array+0x2e>
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a0:	4798      	blx	r3
 80009a2:	3601      	adds	r6, #1
 80009a4:	e7ee      	b.n	8000984 <__libc_init_array+0xc>
 80009a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009aa:	4798      	blx	r3
 80009ac:	3601      	adds	r6, #1
 80009ae:	e7f2      	b.n	8000996 <__libc_init_array+0x1e>
 80009b0:	080009e4 	.word	0x080009e4
 80009b4:	080009e4 	.word	0x080009e4
 80009b8:	080009e4 	.word	0x080009e4
 80009bc:	080009e8 	.word	0x080009e8

080009c0 <_init>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr

080009cc <_fini>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	bf00      	nop
 80009d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d2:	bc08      	pop	{r3}
 80009d4:	469e      	mov	lr, r3
 80009d6:	4770      	bx	lr
