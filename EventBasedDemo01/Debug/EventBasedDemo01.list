
EventBasedDemo01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ad8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000c08  08000c08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c20  08000c20  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08000c20  08000c20  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c20  08000c20  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08000c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000090  08000cb8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08000cb8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001551  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000072b  00000000  00000000  0002160a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00021d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00021f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014d9  00000000  00000000  00022090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001005  00000000  00000000  00023569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006186  00000000  00000000  0002456e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002a6f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f0  00000000  00000000  0002a744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000090 	.word	0x20000090
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bf0 	.word	0x08000bf0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000094 	.word	0x20000094
 800016c:	08000bf0 	.word	0x08000bf0

08000170 <Delay_vMsIn16MHz>:

/*
*		Function To Delay By Milliseconds ( 16MHz CPU CLK )
*/
extern void Delay_vMsIn16MHz(u16 Copy_u16CountNum)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	volatile u16 u16Local_Count1 ;
	volatile u16 u16Local_Count2 ;
	for(u16Local_Count1 = 0; u16Local_Count1 < Copy_u16CountNum; u16Local_Count1++)
 800017a:	2300      	movs	r3, #0
 800017c:	81fb      	strh	r3, [r7, #14]
 800017e:	e012      	b.n	80001a6 <Delay_vMsIn16MHz+0x36>
	for(u16Local_Count2 = 0; u16Local_Count2 < 3180  ; u16Local_Count2++)
 8000180:	2300      	movs	r3, #0
 8000182:	81bb      	strh	r3, [r7, #12]
 8000184:	e004      	b.n	8000190 <Delay_vMsIn16MHz+0x20>
 8000186:	89bb      	ldrh	r3, [r7, #12]
 8000188:	b29b      	uxth	r3, r3
 800018a:	3301      	adds	r3, #1
 800018c:	b29b      	uxth	r3, r3
 800018e:	81bb      	strh	r3, [r7, #12]
 8000190:	89bb      	ldrh	r3, [r7, #12]
 8000192:	b29b      	uxth	r3, r3
 8000194:	f640 426b 	movw	r2, #3179	; 0xc6b
 8000198:	4293      	cmp	r3, r2
 800019a:	d9f4      	bls.n	8000186 <Delay_vMsIn16MHz+0x16>
	for(u16Local_Count1 = 0; u16Local_Count1 < Copy_u16CountNum; u16Local_Count1++)
 800019c:	89fb      	ldrh	r3, [r7, #14]
 800019e:	b29b      	uxth	r3, r3
 80001a0:	3301      	adds	r3, #1
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	81fb      	strh	r3, [r7, #14]
 80001a6:	89fb      	ldrh	r3, [r7, #14]
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	88fa      	ldrh	r2, [r7, #6]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d8e7      	bhi.n	8000180 <Delay_vMsIn16MHz+0x10>
	{} // Do nothing for 1 ms
}
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr

080001bc <MCAL_GPIO_Init>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

extern void MCAL_GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

	u32 TempReg = 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7) /* CRL : CR[0] : Pins 0 : 7 */
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	791b      	ldrb	r3, [r3, #4]
 80001cc:	2b07      	cmp	r3, #7
 80001ce:	d846      	bhi.n	800025e <MCAL_GPIO_Init+0xa2>
	{
		/* 1. Configure The Mode of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ) );
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	795b      	ldrb	r3, [r3, #5]
 80001d4:	461a      	mov	r2, r3
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	791b      	ldrb	r3, [r3, #4]
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	fa02 f303 	lsl.w	r3, r2, r3
 80001e0:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /* Clearing Pins */
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	791b      	ldrb	r3, [r3, #4]
 80001ec:	009b      	lsls	r3, r3, #2
 80001ee:	2103      	movs	r1, #3
 80001f0:	fa01 f303 	lsl.w	r3, r1, r3
 80001f4:	43db      	mvns	r3, r3
 80001f6:	4619      	mov	r1, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	400a      	ands	r2, r1
 80001fe:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	6819      	ldr	r1, [r3, #0]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	430a      	orrs	r2, r1
 800020e:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]

		/* 2. Configure The Configuration of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) + 2) );
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	799b      	ldrb	r3, [r3, #6]
 8000218:	461a      	mov	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	3302      	adds	r3, #2
 8000222:	fa02 f303 	lsl.w	r3, r2, r3
 8000226:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) + 2) ); /* Clearing Pins */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	3302      	adds	r3, #2
 8000236:	2103      	movs	r1, #3
 8000238:	fa01 f303 	lsl.w	r3, r1, r3
 800023c:	43db      	mvns	r3, r3
 800023e:	4619      	mov	r1, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	400a      	ands	r2, r1
 8000246:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	6819      	ldr	r1, [r3, #0]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	430a      	orrs	r2, r1
 8000256:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[1] |= TempReg;

		TempReg = 0;
	}
}
 800025c:	e04d      	b.n	80002fa <MCAL_GPIO_Init+0x13e>
	else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber >= 8) /* CRH : CR[1] : Pins 8 : 15 */
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	791b      	ldrb	r3, [r3, #4]
 8000262:	2b07      	cmp	r3, #7
 8000264:	d949      	bls.n	80002fa <MCAL_GPIO_Init+0x13e>
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32)  );
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	795b      	ldrb	r3, [r3, #5]
 800026a:	461a      	mov	r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	791b      	ldrb	r3, [r3, #4]
 8000270:	3b08      	subs	r3, #8
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	fa02 f303 	lsl.w	r3, r2, r3
 8000278:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32) ); /* Clearing Pins */
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	791b      	ldrb	r3, [r3, #4]
 8000284:	3b08      	subs	r3, #8
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	2103      	movs	r1, #3
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43db      	mvns	r3, r3
 8000290:	4619      	mov	r1, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	400a      	ands	r2, r1
 8000298:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6859      	ldr	r1, [r3, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68fa      	ldr	r2, [r7, #12]
 80002a6:	430a      	orrs	r2, r1
 80002a8:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ((4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32 + 2));
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	799b      	ldrb	r3, [r3, #6]
 80002b2:	461a      	mov	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	791b      	ldrb	r3, [r3, #4]
 80002b8:	3b08      	subs	r3, #8
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	3302      	adds	r3, #2
 80002be:	fa02 f303 	lsl.w	r3, r2, r3
 80002c2:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ((4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32 + 2)); /* Clearing Pins */
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	685a      	ldr	r2, [r3, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	791b      	ldrb	r3, [r3, #4]
 80002ce:	3b08      	subs	r3, #8
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	3302      	adds	r3, #2
 80002d4:	2103      	movs	r1, #3
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	43db      	mvns	r3, r3
 80002dc:	4619      	mov	r1, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	400a      	ands	r2, r1
 80002e4:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	6859      	ldr	r1, [r3, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	430a      	orrs	r2, r1
 80002f4:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <MCAL_GPIO_WriteOutputPin>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

void MCAL_GPIO_WriteOutputPin(GPIOx_t *pGPIOx, u8 u8PinNumber, u8 u8Value)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
 8000310:	4613      	mov	r3, r2
 8000312:	70bb      	strb	r3, [r7, #2]
	if(u8Value == GPIO_PIN_SET)
 8000314:	78bb      	ldrb	r3, [r7, #2]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d107      	bne.n	800032a <MCAL_GPIO_WriteOutputPin+0x26>
	{
		pGPIOx->BSRR = (1 << u8PinNumber);
 800031a:	78fb      	ldrb	r3, [r7, #3]
 800031c:	2201      	movs	r2, #1
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	461a      	mov	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	611a      	str	r2, [r3, #16]
	}
	else if (u8Value == GPIO_PIN_RESET)
	{
		pGPIOx->BSRR = (1 << (u8PinNumber + 16) );
	}
}
 8000328:	e00a      	b.n	8000340 <MCAL_GPIO_WriteOutputPin+0x3c>
	else if (u8Value == GPIO_PIN_RESET)
 800032a:	78bb      	ldrb	r3, [r7, #2]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d107      	bne.n	8000340 <MCAL_GPIO_WriteOutputPin+0x3c>
		pGPIOx->BSRR = (1 << (u8PinNumber + 16) );
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	3310      	adds	r3, #16
 8000334:	2201      	movs	r2, #1
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	461a      	mov	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	611a      	str	r2, [r3, #16]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
	...

0800034c <HAL_LCD_LCDInit>:
 * The E pin (for “Enable”) starts a read/write operation and will be discussed in the next section. */

/*============================================   Start_Function   ============================================*/

extern void HAL_LCD_LCDInit(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08c      	sub	sp, #48	; 0x30
 8000350:	af00      	add	r7, sp, #0
#elif LCD_MODE == _4_BIT_MODE

	GPIO_Handle_t LCD_D4, LCD_D5, LCD_D6, LCD_D7, LCD_EN, LCD_RS;

	/* Data Pins Configuration */
	LCD_D4.pGPIOx = LCD_DATA_PORT;
 8000352:	4b34      	ldr	r3, [pc, #208]	; (8000424 <HAL_LCD_LCDInit+0xd8>)
 8000354:	62bb      	str	r3, [r7, #40]	; 0x28
	LCD_D5.pGPIOx = LCD_DATA_PORT;
 8000356:	4b33      	ldr	r3, [pc, #204]	; (8000424 <HAL_LCD_LCDInit+0xd8>)
 8000358:	623b      	str	r3, [r7, #32]
	LCD_D6.pGPIOx = LCD_DATA_PORT;
 800035a:	4b32      	ldr	r3, [pc, #200]	; (8000424 <HAL_LCD_LCDInit+0xd8>)
 800035c:	61bb      	str	r3, [r7, #24]
	LCD_D7.pGPIOx = LCD_DATA_PORT;
 800035e:	4b31      	ldr	r3, [pc, #196]	; (8000424 <HAL_LCD_LCDInit+0xd8>)
 8000360:	613b      	str	r3, [r7, #16]

	LCD_D4.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA4_PIN;
 8000362:	230f      	movs	r3, #15
 8000364:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	LCD_D5.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA5_PIN;
 8000368:	230e      	movs	r3, #14
 800036a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	LCD_D6.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA6_PIN;
 800036e:	230d      	movs	r3, #13
 8000370:	773b      	strb	r3, [r7, #28]
	LCD_D7.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA7_PIN;
 8000372:	230c      	movs	r3, #12
 8000374:	753b      	strb	r3, [r7, #20]

	LCD_D4.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 8000376:	2301      	movs	r3, #1
 8000378:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	LCD_D5.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 800037c:	2301      	movs	r3, #1
 800037e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	LCD_D6.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 8000382:	2301      	movs	r3, #1
 8000384:	777b      	strb	r3, [r7, #29]
	LCD_D7.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 8000386:	2301      	movs	r3, #1
 8000388:	757b      	strb	r3, [r7, #21]

	LCD_D4.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 800038a:	2300      	movs	r3, #0
 800038c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	LCD_D5.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 8000390:	2300      	movs	r3, #0
 8000392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	LCD_D6.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 8000396:	2300      	movs	r3, #0
 8000398:	77bb      	strb	r3, [r7, #30]
	LCD_D7.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 800039a:	2300      	movs	r3, #0
 800039c:	75bb      	strb	r3, [r7, #22]

	MCAL_GPIO_Init(&LCD_D4);
 800039e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff0a 	bl	80001bc <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_D5);
 80003a8:	f107 0320 	add.w	r3, r7, #32
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff05 	bl	80001bc <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_D6);
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff00 	bl	80001bc <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_D7);
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff fefb 	bl	80001bc <MCAL_GPIO_Init>

	/* Control Pins Configuration */
	LCD_EN.pGPIOx = LCD_CTRL_PORT;
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <HAL_LCD_LCDInit+0xdc>)
 80003c8:	60bb      	str	r3, [r7, #8]
	LCD_RS.pGPIOx = LCD_CTRL_PORT;
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <HAL_LCD_LCDInit+0xdc>)
 80003cc:	603b      	str	r3, [r7, #0]

	LCD_EN.GPIO_PinConfig.GPIO_PinNumber = LCD_EN_PIN;
 80003ce:	2308      	movs	r3, #8
 80003d0:	733b      	strb	r3, [r7, #12]
	LCD_RS.GPIO_PinConfig.GPIO_PinNumber = LCD_RS_PIN;
 80003d2:	230b      	movs	r3, #11
 80003d4:	713b      	strb	r3, [r7, #4]

	LCD_EN.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 80003d6:	2301      	movs	r3, #1
 80003d8:	737b      	strb	r3, [r7, #13]
	LCD_RS.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 80003da:	2301      	movs	r3, #1
 80003dc:	717b      	strb	r3, [r7, #5]

	LCD_EN.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 80003de:	2300      	movs	r3, #0
 80003e0:	73bb      	strb	r3, [r7, #14]
	LCD_RS.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	71bb      	strb	r3, [r7, #6]

	MCAL_GPIO_Init(&LCD_EN);
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff fee6 	bl	80001bc <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_RS);
 80003f0:	463b      	mov	r3, r7
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff fee2 	bl	80001bc <MCAL_GPIO_Init>

//	Delay_vMsIn16MHz(1000); //500

	HAL_LCD_LCDWriteCommand(_4_BIT_MODE_COMAND_1);
 80003f8:	2033      	movs	r0, #51	; 0x33
 80003fa:	f000 f817 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(_4_BIT_MODE_COMAND_2);
 80003fe:	2032      	movs	r0, #50	; 0x32
 8000400:	f000 f814 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(_4_BIT_MODE_COMAND_3);
 8000404:	2028      	movs	r0, #40	; 0x28
 8000406:	f000 f811 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(DISPLAY_ON_CURSOR_OFF);
 800040a:	200c      	movs	r0, #12
 800040c:	f000 f80e 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(LCD_RETURN_HOME);
 8000410:	2002      	movs	r0, #2
 8000412:	f000 f80b 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(LCD_CLEAR);
 8000416:	2001      	movs	r0, #1
 8000418:	f000 f808 	bl	800042c <HAL_LCD_LCDWriteCommand>
#endif
}
 800041c:	bf00      	nop
 800041e:	3730      	adds	r7, #48	; 0x30
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40010c00 	.word	0x40010c00
 8000428:	40010800 	.word	0x40010800

0800042c <HAL_LCD_LCDWriteCommand>:
/*============================================   End_Function     ============================================*/
/*============================================   Start_Function   ============================================*/

void HAL_LCD_LCDWriteCommand(u8 u8Command)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]

	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
 8000436:	2200      	movs	r2, #0
 8000438:	210b      	movs	r1, #11
 800043a:	483d      	ldr	r0, [pc, #244]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 800043c:	f7ff ff62 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

#if LCD_MODE ==_8_BIT_MODE

#elif LCD_MODE ==_4_BIT_MODE

	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, GET_BIT(u8Command, 4) );
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	091b      	lsrs	r3, r3, #4
 8000444:	b2db      	uxtb	r3, r3
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	210f      	movs	r1, #15
 8000450:	4838      	ldr	r0, [pc, #224]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 8000452:	f7ff ff57 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, GET_BIT(u8Command, 5) );
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	095b      	lsrs	r3, r3, #5
 800045a:	b2db      	uxtb	r3, r3
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	210e      	movs	r1, #14
 8000466:	4833      	ldr	r0, [pc, #204]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 8000468:	f7ff ff4c 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, GET_BIT(u8Command, 6) );
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	099b      	lsrs	r3, r3, #6
 8000470:	b2db      	uxtb	r3, r3
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	b2db      	uxtb	r3, r3
 8000478:	461a      	mov	r2, r3
 800047a:	210d      	movs	r1, #13
 800047c:	482d      	ldr	r0, [pc, #180]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 800047e:	f7ff ff41 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA7_PIN, GET_BIT(u8Command, 7) );
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	09db      	lsrs	r3, r3, #7
 8000486:	b2db      	uxtb	r3, r3
 8000488:	461a      	mov	r2, r3
 800048a:	210c      	movs	r1, #12
 800048c:	4829      	ldr	r0, [pc, #164]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 800048e:	f7ff ff39 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, u8Command & (u8)(1 << 6) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, u8Command & (u8)(1 << 5) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, u8Command & (u8)(1 << 4) );


	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
 8000492:	2201      	movs	r2, #1
 8000494:	2108      	movs	r1, #8
 8000496:	4826      	ldr	r0, [pc, #152]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 8000498:	f7ff ff34 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

	Delay_vMsIn16MHz(1); //1
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff fe67 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2108      	movs	r1, #8
 80004a6:	4822      	ldr	r0, [pc, #136]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 80004a8:	f7ff ff2c 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

	Delay_vMsIn16MHz(1); //1
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff fe5f 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, GET_BIT(u8Command, 0) );
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	210f      	movs	r1, #15
 80004be:	481d      	ldr	r0, [pc, #116]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 80004c0:	f7ff ff20 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, GET_BIT(u8Command, 1) );
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	085b      	lsrs	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	461a      	mov	r2, r3
 80004d2:	210e      	movs	r1, #14
 80004d4:	4817      	ldr	r0, [pc, #92]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 80004d6:	f7ff ff15 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, GET_BIT(u8Command, 2) );
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	089b      	lsrs	r3, r3, #2
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	461a      	mov	r2, r3
 80004e8:	210d      	movs	r1, #13
 80004ea:	4812      	ldr	r0, [pc, #72]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 80004ec:	f7ff ff0a 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA7_PIN, GET_BIT(u8Command, 3) );
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	08db      	lsrs	r3, r3, #3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	461a      	mov	r2, r3
 80004fe:	210c      	movs	r1, #12
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 8000502:	f7ff feff 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, u8Command & (u8)(1 << 2) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, u8Command & (u8)(1 << 1) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, u8Command & (u8)(1 << 0) );


	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 800050c:	f7ff fefa 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

	Delay_vMsIn16MHz(1); //1
 8000510:	2001      	movs	r0, #1
 8000512:	f7ff fe2d 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
 8000516:	2200      	movs	r2, #0
 8000518:	2108      	movs	r1, #8
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 800051c:	f7ff fef2 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
#endif
	Delay_vMsIn16MHz(5); //5
 8000520:	2005      	movs	r0, #5
 8000522:	f7ff fe25 	bl	8000170 <Delay_vMsIn16MHz>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010800 	.word	0x40010800
 8000534:	40010c00 	.word	0x40010c00

08000538 <HAL_LCD_LCDClear>:
}
/*============================================   End_Function     ============================================*/
/*============================================   Start_Function   ============================================*/

extern void HAL_LCD_LCDClear(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_LCD_LCDWriteCommand(LCD_CLEAR);
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff75 	bl	800042c <HAL_LCD_LCDWriteCommand>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <MCAL_NVIC_EnableInterrupt>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_NVIC_EnableInterrupt(u8 IRQNumber, u8 IRQStatus)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	460a      	mov	r2, r1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	4613      	mov	r3, r2
 8000556:	71bb      	strb	r3, [r7, #6]
	if(IRQStatus == ENABLE)
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d11c      	bne.n	8000598 <MCAL_NVIC_EnableInterrupt+0x50>
	{
		if(IRQNumber <= 31)
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b1f      	cmp	r3, #31
 8000562:	d80a      	bhi.n	800057a <MCAL_NVIC_EnableInterrupt+0x32>
		{
			NVIC_ISER0 |= (1 << IRQNumber);
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <MCAL_NVIC_EnableInterrupt+0x94>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	79fa      	ldrb	r2, [r7, #7]
 800056a:	2101      	movs	r1, #1
 800056c:	fa01 f202 	lsl.w	r2, r1, r2
 8000570:	4611      	mov	r1, r2
 8000572:	4a1a      	ldr	r2, [pc, #104]	; (80005dc <MCAL_NVIC_EnableInterrupt+0x94>)
 8000574:	430b      	orrs	r3, r1
 8000576:	6013      	str	r3, [r2, #0]
		else if(IRQNumber <= 63)
		{
			NVIC_ICER1 |= (1 << (IRQNumber - 32) );
		}
	}
}
 8000578:	e02a      	b.n	80005d0 <MCAL_NVIC_EnableInterrupt+0x88>
		else if(IRQNumber <= 63)
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b3f      	cmp	r3, #63	; 0x3f
 800057e:	d827      	bhi.n	80005d0 <MCAL_NVIC_EnableInterrupt+0x88>
			NVIC_ISER1 |= (1 << (IRQNumber - 32) );
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MCAL_NVIC_EnableInterrupt+0x98>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	79fa      	ldrb	r2, [r7, #7]
 8000586:	3a20      	subs	r2, #32
 8000588:	2101      	movs	r1, #1
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	4611      	mov	r1, r2
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <MCAL_NVIC_EnableInterrupt+0x98>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6013      	str	r3, [r2, #0]
}
 8000596:	e01b      	b.n	80005d0 <MCAL_NVIC_EnableInterrupt+0x88>
		if(IRQNumber <= 31)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b1f      	cmp	r3, #31
 800059c:	d80a      	bhi.n	80005b4 <MCAL_NVIC_EnableInterrupt+0x6c>
			NVIC_ICER0 |= (1 << IRQNumber);
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MCAL_NVIC_EnableInterrupt+0x9c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	79fa      	ldrb	r2, [r7, #7]
 80005a4:	2101      	movs	r1, #1
 80005a6:	fa01 f202 	lsl.w	r2, r1, r2
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <MCAL_NVIC_EnableInterrupt+0x9c>)
 80005ae:	430b      	orrs	r3, r1
 80005b0:	6013      	str	r3, [r2, #0]
}
 80005b2:	e00d      	b.n	80005d0 <MCAL_NVIC_EnableInterrupt+0x88>
		else if(IRQNumber <= 63)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b3f      	cmp	r3, #63	; 0x3f
 80005b8:	d80a      	bhi.n	80005d0 <MCAL_NVIC_EnableInterrupt+0x88>
			NVIC_ICER1 |= (1 << (IRQNumber - 32) );
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MCAL_NVIC_EnableInterrupt+0xa0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	3a20      	subs	r2, #32
 80005c2:	2101      	movs	r1, #1
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <MCAL_NVIC_EnableInterrupt+0xa0>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000e100 	.word	0xe000e100
 80005e0:	e000e104 	.word	0xe000e104
 80005e4:	e000e180 	.word	0xe000e180
 80005e8:	e000e184 	.word	0xe000e184

080005ec <USART_PeriClockControl>:
 */
#include <Stm32F103_USART.h>

void (*UARTptrToFunction)(void) = NULL;

void USART_PeriClockControl(USART_t *pUSARTx, u8 EnorDi) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx == MUSART1) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a28      	ldr	r2, [pc, #160]	; (800069c <USART_PeriClockControl+0xb0>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d112      	bne.n	8000626 <USART_PeriClockControl+0x3a>
		switch(EnorDi) {
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d008      	beq.n	8000618 <USART_PeriClockControl+0x2c>
 8000606:	2b01      	cmp	r3, #1
 8000608:	d13b      	bne.n	8000682 <USART_PeriClockControl+0x96>
			case ENABLE:
				USART1_PCLK_EN();
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <USART_PeriClockControl+0xb4>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <USART_PeriClockControl+0xb4>)
 8000610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000614:	6193      	str	r3, [r2, #24]
				break;
 8000616:	e03b      	b.n	8000690 <USART_PeriClockControl+0xa4>
			case DISABLE:
				USART1_PCLK_DIS();
 8000618:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <USART_PeriClockControl+0xb4>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <USART_PeriClockControl+0xb4>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	60d3      	str	r3, [r2, #12]
			default:
				break;
 8000624:	e02d      	b.n	8000682 <USART_PeriClockControl+0x96>
		}
	}
	else if(pUSARTx == MUSART2) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <USART_PeriClockControl+0xb8>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d112      	bne.n	8000654 <USART_PeriClockControl+0x68>
		switch(EnorDi) {
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <USART_PeriClockControl+0x5a>
 8000634:	2b01      	cmp	r3, #1
 8000636:	d126      	bne.n	8000686 <USART_PeriClockControl+0x9a>
			case ENABLE:
				USART2_PCLK_EN();	break;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <USART_PeriClockControl+0xb4>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <USART_PeriClockControl+0xb4>)
 800063e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000642:	61d3      	str	r3, [r2, #28]
 8000644:	e024      	b.n	8000690 <USART_PeriClockControl+0xa4>
			case DISABLE:
				USART2_PCLK_DIS();	break;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <USART_PeriClockControl+0xb4>)
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <USART_PeriClockControl+0xb4>)
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	6113      	str	r3, [r2, #16]
 8000652:	e01d      	b.n	8000690 <USART_PeriClockControl+0xa4>
			default:				break;
		}
	}
	else if(pUSARTx == MUSART3) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <USART_PeriClockControl+0xbc>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d116      	bne.n	800068a <USART_PeriClockControl+0x9e>
		switch(EnorDi) {
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d008      	beq.n	8000674 <USART_PeriClockControl+0x88>
 8000662:	2b01      	cmp	r3, #1
 8000664:	d113      	bne.n	800068e <USART_PeriClockControl+0xa2>
			case ENABLE:
				USART3_PCLK_EN();	break;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <USART_PeriClockControl+0xb4>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <USART_PeriClockControl+0xb4>)
 800066c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	e00d      	b.n	8000690 <USART_PeriClockControl+0xa4>
			case DISABLE:
				USART3_PCLK_DIS();	break;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <USART_PeriClockControl+0xb4>)
 8000676:	691b      	ldr	r3, [r3, #16]
 8000678:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <USART_PeriClockControl+0xb4>)
 800067a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067e:	6113      	str	r3, [r2, #16]
 8000680:	e006      	b.n	8000690 <USART_PeriClockControl+0xa4>
				break;
 8000682:	bf00      	nop
 8000684:	e004      	b.n	8000690 <USART_PeriClockControl+0xa4>
			default:				break;
 8000686:	bf00      	nop
 8000688:	e002      	b.n	8000690 <USART_PeriClockControl+0xa4>
			default:				break;
		}
	}
 800068a:	bf00      	nop
 800068c:	e000      	b.n	8000690 <USART_PeriClockControl+0xa4>
			default:				break;
 800068e:	bf00      	nop
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40013800 	.word	0x40013800
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40004400 	.word	0x40004400
 80006a8:	40004800 	.word	0x40004800

080006ac <USART_PeriControl>:

void USART_PeriControl(USART_t *pUSARTx, u8 EnorDi) {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d106      	bne.n	80006cc <USART_PeriControl+0x20>
		pUSARTx->USART_CR1 |= (1 << 13);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60da      	str	r2, [r3, #12]
	}
	else if(EnorDi == DISABLE) {
		pUSARTx->USART_CR1 &= ~(1 << 13);
	}
}
 80006ca:	e008      	b.n	80006de <USART_PeriControl+0x32>
	else if(EnorDi == DISABLE) {
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d105      	bne.n	80006de <USART_PeriControl+0x32>
		pUSARTx->USART_CR1 &= ~(1 << 13);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60da      	str	r2, [r3, #12]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	u32 tempReg = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
	/* Enable clock  */
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2101      	movs	r1, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff76 	bl	80005ec <USART_PeriClockControl>

	USART_PeriControl(pUSARTHandle->pUSARTx, ENABLE);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2101      	movs	r1, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffd0 	bl	80006ac <USART_PeriControl>

	/**************************************************************/
	/* USART_Mode  USART_Mode  USART_Mode  USART_Mode  USART_Mode */
	/**************************************************************/
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d104      	bne.n	8000720 <USART_Init+0x38>
		tempReg |= (1 << 3); // TX only
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	e016      	b.n	800074e <USART_Init+0x66>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b01      	cmp	r3, #1
 8000728:	d104      	bne.n	8000734 <USART_Init+0x4c>
		tempReg |= (1 << 2); // RX only
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e00c      	b.n	800074e <USART_Init+0x66>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b02      	cmp	r3, #2
 800073c:	d107      	bne.n	800074e <USART_Init+0x66>
		tempReg |= (1 << 3); // TX
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << 2); // RX
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	60fb      	str	r3, [r7, #12]
	}

	/**************************************************************/
	/* USART_WordLength  USART_WordLength  USART_WordLength       */
	/**************************************************************/
	if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_8BITS) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7b5b      	ldrb	r3, [r3, #13]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d104      	bne.n	8000762 <USART_Init+0x7a>
		tempReg &= ~(1 << 12); // 8-bit word length
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e008      	b.n	8000774 <USART_Init+0x8c>
	}
	else if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7b5b      	ldrb	r3, [r3, #13]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b01      	cmp	r3, #1
 800076a:	d103      	bne.n	8000774 <USART_Init+0x8c>
		tempReg |= (1 << 12); // 9-bit word length
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000772:	60fb      	str	r3, [r7, #12]
	}

	/**************************************************************/
	/* USART_ParityControl  USART_ParityControl  		          */
	/**************************************************************/
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7b9b      	ldrb	r3, [r3, #14]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <USART_Init+0xa0>
		tempReg &= ~(1 << 10); // parity disable
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e01a      	b.n	80007be <USART_Init+0xd6>
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7b9b      	ldrb	r3, [r3, #14]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b01      	cmp	r3, #1
 8000790:	d108      	bne.n	80007a4 <USART_Init+0xbc>
		tempReg |= (1 << 10); // parity enable
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000798:	60fb      	str	r3, [r7, #12]
		tempReg &= ~(1 << 9); // even parity
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	e00c      	b.n	80007be <USART_Init+0xd6>
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7b9b      	ldrb	r3, [r3, #14]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d107      	bne.n	80007be <USART_Init+0xd6>
		tempReg |= (1 << 10); // parity enable
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b4:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << 9); // odd parity
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007bc:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->USART_CR1 |= tempReg; // Initialize CR1 Register
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68d9      	ldr	r1, [r3, #12]
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	60da      	str	r2, [r3, #12]

    tempReg=0; // Zeroing tempReg
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]

	/**************************************************************/
	/* USART_NoOfStopBits  USART_NoOfStopBits  USART_NoOfStopBits */
	/**************************************************************/
    if(pUSARTHandle->USART_Config.USART_NoOfStopBits == USART_STOPBITS_1) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	7b1b      	ldrb	r3, [r3, #12]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d104      	bne.n	80007e2 <USART_Init+0xfa>
    	tempReg &= ~(1 << 12);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	e007      	b.n	80007f2 <USART_Init+0x10a>
    }
    else {
    	tempReg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << 12;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7b1b      	ldrb	r3, [r3, #12]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	031b      	lsls	r3, r3, #12
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
    }

    /* Programming CR2 register */
    pUSARTHandle->pUSARTx->USART_CR2 |= tempReg; // Initialize CR2 Register
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6919      	ldr	r1, [r3, #16]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	430a      	orrs	r2, r1
 80007fc:	611a      	str	r2, [r3, #16]

    tempReg=0; // Zeroing tempReg
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]

    /**************************************************************/
    /* USART_HWFlowControl  USART_HWFlowControl  				  */
    /**************************************************************/
    if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7bdb      	ldrb	r3, [r3, #15]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b01      	cmp	r3, #1
 800080a:	d104      	bne.n	8000816 <USART_Init+0x12e>
        tempReg |= (1 << 9); // Enabling CTS Flow control
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e016      	b.n	8000844 <USART_Init+0x15c>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS) {
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7bdb      	ldrb	r3, [r3, #15]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b02      	cmp	r3, #2
 800081e:	d104      	bne.n	800082a <USART_Init+0x142>
        tempReg |= (1 << 10); // Enabling RTS Flow control
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e00c      	b.n	8000844 <USART_Init+0x15c>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7bdb      	ldrb	r3, [r3, #15]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b03      	cmp	r3, #3
 8000832:	d107      	bne.n	8000844 <USART_Init+0x15c>
        /* Enabling both CTS and RTS Flow control */
        tempReg |= (1 << 10);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800083a:	60fb      	str	r3, [r7, #12]
        tempReg |= (1 << 9);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000842:	60fb      	str	r3, [r7, #12]
    }
    pUSARTHandle->pUSARTx->USART_CR3 |= tempReg;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6959      	ldr	r1, [r3, #20]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	430a      	orrs	r2, r1
 800084e:	615a      	str	r2, [r3, #20]

    USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	4619      	mov	r1, r3
 800085a:	4610      	mov	r0, r2
 800085c:	f000 f80a 	bl	8000874 <USART_SetBaudRate>

    /* Receive interrupt */
    pUSARTHandle->pUSARTx->USART_CR1 |= (1 << 5);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68da      	ldr	r2, [r3, #12]
 8000866:	f042 0220 	orr.w	r2, r2, #32
 800086a:	60da      	str	r2, [r3, #12]
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <USART_SetBaudRate>:

void USART_SetBaudRate(USART_t *pUSARTx, u32 BaudRate)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
    /* HSI is used as the clock source which is 8MHz */
    u16 usartdiv;

    usartdiv = (8000000 / BaudRate); // eg. BR = 9600 >> usartdiv = 52
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <USART_SetBaudRate+0x34>)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	81fb      	strh	r3, [r7, #14]


    /* Placing Mantissa part in appropriate bit position. USART_BRR */
    pUSARTx->USART_BRR = (((usartdiv / 16) << 4) | ((usartdiv % 16) << 0));
 8000888:	89fb      	ldrh	r3, [r7, #14]
 800088a:	091b      	lsrs	r3, r3, #4
 800088c:	b29b      	uxth	r3, r3
 800088e:	011a      	lsls	r2, r3, #4
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	4313      	orrs	r3, r2
 8000898:	461a      	mov	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	609a      	str	r2, [r3, #8]
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	007a1200 	.word	0x007a1200

080008ac <UART_CB_Assignment>:
	while(!(pUSARTx->USART_SR >> 7 & 1));

	pUSARTx->USART_DR = *pRxBuffer;
}

void UART_CB_Assignment(void (*Callback_ptr)(void)) {
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	UARTptrToFunction = Callback_ptr;
 80008b4:	4a03      	ldr	r2, [pc, #12]	; (80008c4 <UART_CB_Assignment+0x18>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	200000ac 	.word	0x200000ac

080008c8 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	if (MUSART1->USART_SR >> 5 & 1) {
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <USART1_IRQHandler+0x1c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <USART1_IRQHandler+0x18>
		UARTptrToFunction();
 80008da:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <USART1_IRQHandler+0x20>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4798      	blx	r3
	}
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40013800 	.word	0x40013800
 80008e8:	200000ac 	.word	0x200000ac

080008ec <main>:

u16 count = 0;

u8 read = 0;

int main(void) {
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b08b      	sub	sp, #44	; 0x2c
 80008f0:	af00      	add	r7, sp, #0
	/* Activate RCC for GPIOA, GPIOB, GPIOC */
	GPIOA_PCLK_EN();
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <main+0xcc>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	4a30      	ldr	r2, [pc, #192]	; (80009b8 <main+0xcc>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6193      	str	r3, [r2, #24]
	GPIOB_PCLK_EN();
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <main+0xcc>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a2d      	ldr	r2, [pc, #180]	; (80009b8 <main+0xcc>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6193      	str	r3, [r2, #24]
	GPIOC_PCLK_EN();
 800090a:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <main+0xcc>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <main+0xcc>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6193      	str	r3, [r2, #24]
	/* AFIO Clock Enable */
	AFIO_PCLK_EN();
 8000916:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <main+0xcc>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a27      	ldr	r2, [pc, #156]	; (80009b8 <main+0xcc>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6193      	str	r3, [r2, #24]

	// Determine the function to be called when ISR is fired
	UART_CB_Assignment(UART1_callbackFunction);
 8000922:	4826      	ldr	r0, [pc, #152]	; (80009bc <main+0xd0>)
 8000924:	f7ff ffc2 	bl	80008ac <UART_CB_Assignment>

	/* Enable USART1 INT */
	MCAL_NVIC_EnableInterrupt(37, ENABLE);
 8000928:	2101      	movs	r1, #1
 800092a:	2025      	movs	r0, #37	; 0x25
 800092c:	f7ff fe0c 	bl	8000548 <MCAL_NVIC_EnableInterrupt>

	/* USART1_TX */
	GPIO_PinConfig_t PA_A9 = { 9, OUTPUT_50MHZ_MODE, ALT_FN_OUTPUT_PU_PL_MODE };
 8000930:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <main+0xd4>)
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	4611      	mov	r1, r2
 800093a:	8019      	strh	r1, [r3, #0]
 800093c:	3302      	adds	r3, #2
 800093e:	0c12      	lsrs	r2, r2, #16
 8000940:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t PA9 = { MGPIOA, PA_A9 };
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <main+0xd8>)
 8000944:	61fb      	str	r3, [r7, #28]
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	4611      	mov	r1, r2
 8000952:	8019      	strh	r1, [r3, #0]
 8000954:	3302      	adds	r3, #2
 8000956:	0c12      	lsrs	r2, r2, #16
 8000958:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&PA9);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fc2c 	bl	80001bc <MCAL_GPIO_Init>

	/* USART1_RX */
	GPIO_PinConfig_t PA_A10 = { 10, INPUT_MODE, FLOATING_INPUT };
 8000964:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <main+0xdc>)
 8000966:	f107 0318 	add.w	r3, r7, #24
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	4611      	mov	r1, r2
 800096e:	8019      	strh	r1, [r3, #0]
 8000970:	3302      	adds	r3, #2
 8000972:	0c12      	lsrs	r2, r2, #16
 8000974:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t PA10 = { MGPIOA, PA_A10 };
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <main+0xd8>)
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	f107 0218 	add.w	r2, r7, #24
 8000982:	6812      	ldr	r2, [r2, #0]
 8000984:	4611      	mov	r1, r2
 8000986:	8019      	strh	r1, [r3, #0]
 8000988:	3302      	adds	r3, #2
 800098a:	0c12      	lsrs	r2, r2, #16
 800098c:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&PA10);
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fc12 	bl	80001bc <MCAL_GPIO_Init>

	/* 	u8 USART_Mode;u32 USART_Baud;u8 USART_NoOfStopBits;u8 USART_WordLength;
	 u8 USART_ParityControl;u8 USART_HWFlowControl; */
	USART_Handle_t USART1H = { MUSART1, { USART_MODE_TXRX, USART_STD_BAUD_9600,
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <main+0xe0>)
 800099a:	463c      	mov	r4, r7
 800099c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800099e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	USART_STOPBITS_1, USART_WORDLEN_8BITS, USART_PARITY_DISABLE,
	USART_HW_FLOW_CTRL_NONE } };

	USART_Init(&USART1H);
 80009a2:	463b      	mov	r3, r7
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe9f 	bl	80006e8 <USART_Init>

	HAL_LCD_LCDInit();
 80009aa:	f7ff fccf 	bl	800034c <HAL_LCD_LCDInit>

	HAL_LCD_LCDClear();
 80009ae:	f7ff fdc3 	bl	8000538 <HAL_LCD_LCDClear>

	/* Loop forever */
	for (;;) { APP_HandleQueue(); }
 80009b2:	f000 f80d 	bl	80009d0 <APP_HandleQueue>
 80009b6:	e7fc      	b.n	80009b2 <main+0xc6>
 80009b8:	40021000 	.word	0x40021000
 80009bc:	080009fd 	.word	0x080009fd
 80009c0:	08000c08 	.word	0x08000c08
 80009c4:	40010800 	.word	0x40010800
 80009c8:	08000c0c 	.word	0x08000c0c
 80009cc:	08000c10 	.word	0x08000c10

080009d0 <APP_HandleQueue>:

void delay() {
	for (u32 i = 0; i < 800000 / 2; i++);
}

void APP_HandleQueue(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
    Event currentEvent;
    DequeueEvent(currentEvent);
 80009d6:	7938      	ldrb	r0, [r7, #4]
 80009d8:	f000 f862 	bl	8000aa0 <DequeueEvent>

    // Process the event
    switch (currentEvent.type) {
 80009dc:	793b      	ldrb	r3, [r7, #4]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d105      	bne.n	80009ee <APP_HandleQueue+0x1e>
        case EV_UART_FRAME_REC:
        	HAL_LCD_LCDWriteCommand(read); 	break;
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <APP_HandleQueue+0x28>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fd20 	bl	800042c <HAL_LCD_LCDWriteCommand>
 80009ec:	e000      	b.n	80009f0 <APP_HandleQueue+0x20>
        default:							break;
 80009ee:	bf00      	nop
    }
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000138 	.word	0x20000138

080009fc <UART1_callbackFunction>:

void UART1_callbackFunction(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	Buf = MUSART1->USART_DR;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <UART1_callbackFunction+0x20>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <UART1_callbackFunction+0x24>)
 8000a08:	701a      	strb	r2, [r3, #0]
	EnqueueEvent(EV_UART_FRAME_REC, Buf);
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <UART1_callbackFunction+0x24>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	f000 f806 	bl	8000a24 <EnqueueEvent>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	200000b0 	.word	0x200000b0

08000a24 <EnqueueEvent>:

void EnqueueEvent(EventType Ev, u8 data) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
	SemaphoreWait();
 8000a34:	f000 f872 	bl	8000b1c <SemaphoreWait>

	rb.buf[rb.write] = data;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <EnqueueEvent+0x74>)
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <EnqueueEvent+0x74>)
 8000a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a42:	4413      	add	r3, r2
 8000a44:	79ba      	ldrb	r2, [r7, #6]
 8000a46:	701a      	strb	r2, [r3, #0]
	rb.events[rb.write].type = Ev;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <EnqueueEvent+0x74>)
 8000a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <EnqueueEvent+0x74>)
 8000a50:	4413      	add	r3, r2
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	721a      	strb	r2, [r3, #8]
	if ((rb.write + 1) >= rb.len) {
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <EnqueueEvent+0x74>)
 8000a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <EnqueueEvent+0x74>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d304      	bcc.n	8000a70 <EnqueueEvent+0x4c>
		rb.write = 0;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <EnqueueEvent+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000a6e:	e006      	b.n	8000a7e <EnqueueEvent+0x5a>
	} else {
		rb.write = rb.write + 1;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <EnqueueEvent+0x74>)
 8000a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <EnqueueEvent+0x74>)
 8000a7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	}
	count++;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <EnqueueEvent+0x78>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <EnqueueEvent+0x78>)
 8000a88:	801a      	strh	r2, [r3, #0]
	SemaphoreSignal();
 8000a8a:	f000 f855 	bl	8000b38 <SemaphoreSignal>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000136 	.word	0x20000136

08000aa0 <DequeueEvent>:

void DequeueEvent(Event event) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	7138      	strb	r0, [r7, #4]
	SemaphoreWait();
 8000aa8:	f000 f838 	bl	8000b1c <SemaphoreWait>

	if (rb.read != rb.write) {
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <DequeueEvent+0x70>)
 8000aae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <DequeueEvent+0x70>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d022      	beq.n	8000b02 <DequeueEvent+0x62>
		read = rb.buf[rb.read];
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <DequeueEvent+0x70>)
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <DequeueEvent+0x70>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4413      	add	r3, r2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <DequeueEvent+0x74>)
 8000ace:	701a      	strb	r2, [r3, #0]
		event.type = EV_UART_FRAME_REC;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	713b      	strb	r3, [r7, #4]
		rb.read = (rb.read < (rb.len - 1)) ? (rb.read + 1) : 0;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <DequeueEvent+0x70>)
 8000ad6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <DequeueEvent+0x70>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d204      	bcs.n	8000aee <DequeueEvent+0x4e>
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <DequeueEvent+0x70>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	3301      	adds	r3, #1
 8000aec:	e000      	b.n	8000af0 <DequeueEvent+0x50>
 8000aee:	2300      	movs	r3, #0
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <DequeueEvent+0x70>)
 8000af2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		count--;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <DequeueEvent+0x78>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <DequeueEvent+0x78>)
 8000b00:	801a      	strh	r2, [r3, #0]
	}
	SemaphoreSignal();
 8000b02:	f000 f819 	bl	8000b38 <SemaphoreSignal>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000138 	.word	0x20000138
 8000b18:	20000136 	.word	0x20000136

08000b1c <SemaphoreWait>:

// Wait until the count is greater than zero
void SemaphoreWait(void) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	while (count <= 0) {
 8000b20:	bf00      	nop
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SemaphoreWait+0x18>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0fb      	beq.n	8000b22 <SemaphoreWait+0x6>
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000136 	.word	0x20000136

08000b38 <SemaphoreSignal>:


// Signal that the count has increased
void SemaphoreSignal(void) {
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	count++;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SemaphoreSignal+0x18>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <SemaphoreSignal+0x18>)
 8000b46:	801a      	strh	r2, [r3, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	20000136 	.word	0x20000136

08000b54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	; (8000b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <LoopForever+0xe>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <LoopForever+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b82:	f000 f811 	bl	8000ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b86:	f7ff feb1 	bl	80008ec <main>

08000b8a <LoopForever>:

LoopForever:
  b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   r0, =_estack
 8000b8c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000b98:	08000c28 	.word	0x08000c28
  ldr r2, =_sbss
 8000b9c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ba0:	2000013c 	.word	0x2000013c

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <__libc_init_array>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	2600      	movs	r6, #0
 8000bac:	4d0c      	ldr	r5, [pc, #48]	; (8000be0 <__libc_init_array+0x38>)
 8000bae:	4c0d      	ldr	r4, [pc, #52]	; (8000be4 <__libc_init_array+0x3c>)
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	10a4      	asrs	r4, r4, #2
 8000bb4:	42a6      	cmp	r6, r4
 8000bb6:	d109      	bne.n	8000bcc <__libc_init_array+0x24>
 8000bb8:	f000 f81a 	bl	8000bf0 <_init>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	4d0a      	ldr	r5, [pc, #40]	; (8000be8 <__libc_init_array+0x40>)
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <__libc_init_array+0x44>)
 8000bc2:	1b64      	subs	r4, r4, r5
 8000bc4:	10a4      	asrs	r4, r4, #2
 8000bc6:	42a6      	cmp	r6, r4
 8000bc8:	d105      	bne.n	8000bd6 <__libc_init_array+0x2e>
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd0:	4798      	blx	r3
 8000bd2:	3601      	adds	r6, #1
 8000bd4:	e7ee      	b.n	8000bb4 <__libc_init_array+0xc>
 8000bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bda:	4798      	blx	r3
 8000bdc:	3601      	adds	r6, #1
 8000bde:	e7f2      	b.n	8000bc6 <__libc_init_array+0x1e>
 8000be0:	08000c20 	.word	0x08000c20
 8000be4:	08000c20 	.word	0x08000c20
 8000be8:	08000c20 	.word	0x08000c20
 8000bec:	08000c24 	.word	0x08000c24

08000bf0 <_init>:
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf2:	bf00      	nop
 8000bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf6:	bc08      	pop	{r3}
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	4770      	bx	lr

08000bfc <_fini>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	bf00      	nop
 8000c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c02:	bc08      	pop	{r3}
 8000c04:	469e      	mov	lr, r3
 8000c06:	4770      	bx	lr
