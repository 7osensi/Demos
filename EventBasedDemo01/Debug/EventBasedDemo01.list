
EventBasedDemo01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b08  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000c38  08000c38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c58  08000c58  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000c58  08000c58  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c58  08000c58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c58  08000c58  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c5c  08000c5c  00010c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000010  08000c70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08000c70  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001433  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006af  00000000  00000000  0002146c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00021b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00021cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014df  00000000  00000000  00021e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f45  00000000  00000000  000232f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000613f  00000000  00000000  0002423c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002a37b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000528  00000000  00000000  0002a3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c20 	.word	0x08000c20

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000c20 	.word	0x08000c20

08000170 <Delay_vMsIn16MHz>:

/*
*		Function To Delay By Milliseconds ( 16MHz CPU CLK )
*/
extern void Delay_vMsIn16MHz(u16 Copy_u16CountNum)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	volatile u16 u16Local_Count1 ;
	volatile u16 u16Local_Count2 ;
	for(u16Local_Count1 = 0; u16Local_Count1 < Copy_u16CountNum; u16Local_Count1++)
 800017a:	2300      	movs	r3, #0
 800017c:	81fb      	strh	r3, [r7, #14]
 800017e:	e012      	b.n	80001a6 <Delay_vMsIn16MHz+0x36>
	for(u16Local_Count2 = 0; u16Local_Count2 < 3180  ; u16Local_Count2++)
 8000180:	2300      	movs	r3, #0
 8000182:	81bb      	strh	r3, [r7, #12]
 8000184:	e004      	b.n	8000190 <Delay_vMsIn16MHz+0x20>
 8000186:	89bb      	ldrh	r3, [r7, #12]
 8000188:	b29b      	uxth	r3, r3
 800018a:	3301      	adds	r3, #1
 800018c:	b29b      	uxth	r3, r3
 800018e:	81bb      	strh	r3, [r7, #12]
 8000190:	89bb      	ldrh	r3, [r7, #12]
 8000192:	b29b      	uxth	r3, r3
 8000194:	f640 426b 	movw	r2, #3179	; 0xc6b
 8000198:	4293      	cmp	r3, r2
 800019a:	d9f4      	bls.n	8000186 <Delay_vMsIn16MHz+0x16>
	for(u16Local_Count1 = 0; u16Local_Count1 < Copy_u16CountNum; u16Local_Count1++)
 800019c:	89fb      	ldrh	r3, [r7, #14]
 800019e:	b29b      	uxth	r3, r3
 80001a0:	3301      	adds	r3, #1
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	81fb      	strh	r3, [r7, #14]
 80001a6:	89fb      	ldrh	r3, [r7, #14]
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	88fa      	ldrh	r2, [r7, #6]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d8e7      	bhi.n	8000180 <Delay_vMsIn16MHz+0x10>
	{} // Do nothing for 1 ms
}
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr

080001bc <MCAL_GPIO_Init>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

extern void MCAL_GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

	u32 TempReg = 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7) /* CRL : CR[0] : Pins 0 : 7 */
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	791b      	ldrb	r3, [r3, #4]
 80001cc:	2b07      	cmp	r3, #7
 80001ce:	d846      	bhi.n	800025e <MCAL_GPIO_Init+0xa2>
	{
		/* 1. Configure The Mode of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ) );
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	795b      	ldrb	r3, [r3, #5]
 80001d4:	461a      	mov	r2, r3
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	791b      	ldrb	r3, [r3, #4]
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	fa02 f303 	lsl.w	r3, r2, r3
 80001e0:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /* Clearing Pins */
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	791b      	ldrb	r3, [r3, #4]
 80001ec:	009b      	lsls	r3, r3, #2
 80001ee:	2103      	movs	r1, #3
 80001f0:	fa01 f303 	lsl.w	r3, r1, r3
 80001f4:	43db      	mvns	r3, r3
 80001f6:	4619      	mov	r1, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	400a      	ands	r2, r1
 80001fe:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	6819      	ldr	r1, [r3, #0]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	430a      	orrs	r2, r1
 800020e:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]

		/* 2. Configure The Configuration of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) + 2) );
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	799b      	ldrb	r3, [r3, #6]
 8000218:	461a      	mov	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	3302      	adds	r3, #2
 8000222:	fa02 f303 	lsl.w	r3, r2, r3
 8000226:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) + 2) ); /* Clearing Pins */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	3302      	adds	r3, #2
 8000236:	2103      	movs	r1, #3
 8000238:	fa01 f303 	lsl.w	r3, r1, r3
 800023c:	43db      	mvns	r3, r3
 800023e:	4619      	mov	r1, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	400a      	ands	r2, r1
 8000246:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	6819      	ldr	r1, [r3, #0]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	430a      	orrs	r2, r1
 8000256:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[1] |= TempReg;

		TempReg = 0;
	}
}
 800025c:	e04d      	b.n	80002fa <MCAL_GPIO_Init+0x13e>
	else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber >= 8) /* CRH : CR[1] : Pins 8 : 15 */
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	791b      	ldrb	r3, [r3, #4]
 8000262:	2b07      	cmp	r3, #7
 8000264:	d949      	bls.n	80002fa <MCAL_GPIO_Init+0x13e>
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32)  );
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	795b      	ldrb	r3, [r3, #5]
 800026a:	461a      	mov	r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	791b      	ldrb	r3, [r3, #4]
 8000270:	3b08      	subs	r3, #8
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	fa02 f303 	lsl.w	r3, r2, r3
 8000278:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32) ); /* Clearing Pins */
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	791b      	ldrb	r3, [r3, #4]
 8000284:	3b08      	subs	r3, #8
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	2103      	movs	r1, #3
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43db      	mvns	r3, r3
 8000290:	4619      	mov	r1, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	400a      	ands	r2, r1
 8000298:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6859      	ldr	r1, [r3, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68fa      	ldr	r2, [r7, #12]
 80002a6:	430a      	orrs	r2, r1
 80002a8:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ((4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32 + 2));
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	799b      	ldrb	r3, [r3, #6]
 80002b2:	461a      	mov	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	791b      	ldrb	r3, [r3, #4]
 80002b8:	3b08      	subs	r3, #8
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	3302      	adds	r3, #2
 80002be:	fa02 f303 	lsl.w	r3, r2, r3
 80002c2:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ((4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32 + 2)); /* Clearing Pins */
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	685a      	ldr	r2, [r3, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	791b      	ldrb	r3, [r3, #4]
 80002ce:	3b08      	subs	r3, #8
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	3302      	adds	r3, #2
 80002d4:	2103      	movs	r1, #3
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	43db      	mvns	r3, r3
 80002dc:	4619      	mov	r1, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	400a      	ands	r2, r1
 80002e4:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	6859      	ldr	r1, [r3, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	430a      	orrs	r2, r1
 80002f4:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <MCAL_GPIO_WriteOutputPin>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

void MCAL_GPIO_WriteOutputPin(GPIOx_t *pGPIOx, u8 u8PinNumber, u8 u8Value)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
 8000310:	4613      	mov	r3, r2
 8000312:	70bb      	strb	r3, [r7, #2]
	if(u8Value == GPIO_PIN_SET)
 8000314:	78bb      	ldrb	r3, [r7, #2]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d107      	bne.n	800032a <MCAL_GPIO_WriteOutputPin+0x26>
	{
		pGPIOx->BSRR = (1 << u8PinNumber);
 800031a:	78fb      	ldrb	r3, [r7, #3]
 800031c:	2201      	movs	r2, #1
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	461a      	mov	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	611a      	str	r2, [r3, #16]
	}
	else if (u8Value == GPIO_PIN_RESET)
	{
		pGPIOx->BSRR = (1 << (u8PinNumber + 16) );
	}
}
 8000328:	e00a      	b.n	8000340 <MCAL_GPIO_WriteOutputPin+0x3c>
	else if (u8Value == GPIO_PIN_RESET)
 800032a:	78bb      	ldrb	r3, [r7, #2]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d107      	bne.n	8000340 <MCAL_GPIO_WriteOutputPin+0x3c>
		pGPIOx->BSRR = (1 << (u8PinNumber + 16) );
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	3310      	adds	r3, #16
 8000334:	2201      	movs	r2, #1
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	461a      	mov	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	611a      	str	r2, [r3, #16]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
	...

0800034c <HAL_LCD_LCDInit>:
 * The E pin (for “Enable”) starts a read/write operation and will be discussed in the next section. */

/*============================================   Start_Function   ============================================*/

extern void HAL_LCD_LCDInit(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08c      	sub	sp, #48	; 0x30
 8000350:	af00      	add	r7, sp, #0
#elif LCD_MODE == _4_BIT_MODE

	GPIO_Handle_t LCD_D4, LCD_D5, LCD_D6, LCD_D7, LCD_EN, LCD_RS;

	/* Data Pins Configuration */
	LCD_D4.pGPIOx = LCD_DATA_PORT;
 8000352:	4b34      	ldr	r3, [pc, #208]	; (8000424 <HAL_LCD_LCDInit+0xd8>)
 8000354:	62bb      	str	r3, [r7, #40]	; 0x28
	LCD_D5.pGPIOx = LCD_DATA_PORT;
 8000356:	4b33      	ldr	r3, [pc, #204]	; (8000424 <HAL_LCD_LCDInit+0xd8>)
 8000358:	623b      	str	r3, [r7, #32]
	LCD_D6.pGPIOx = LCD_DATA_PORT;
 800035a:	4b32      	ldr	r3, [pc, #200]	; (8000424 <HAL_LCD_LCDInit+0xd8>)
 800035c:	61bb      	str	r3, [r7, #24]
	LCD_D7.pGPIOx = LCD_DATA_PORT;
 800035e:	4b31      	ldr	r3, [pc, #196]	; (8000424 <HAL_LCD_LCDInit+0xd8>)
 8000360:	613b      	str	r3, [r7, #16]

	LCD_D4.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA4_PIN;
 8000362:	230f      	movs	r3, #15
 8000364:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	LCD_D5.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA5_PIN;
 8000368:	230e      	movs	r3, #14
 800036a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	LCD_D6.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA6_PIN;
 800036e:	230d      	movs	r3, #13
 8000370:	773b      	strb	r3, [r7, #28]
	LCD_D7.GPIO_PinConfig.GPIO_PinNumber = LCD_DATA7_PIN;
 8000372:	230c      	movs	r3, #12
 8000374:	753b      	strb	r3, [r7, #20]

	LCD_D4.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 8000376:	2301      	movs	r3, #1
 8000378:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	LCD_D5.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 800037c:	2301      	movs	r3, #1
 800037e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	LCD_D6.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 8000382:	2301      	movs	r3, #1
 8000384:	777b      	strb	r3, [r7, #29]
	LCD_D7.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 8000386:	2301      	movs	r3, #1
 8000388:	757b      	strb	r3, [r7, #21]

	LCD_D4.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 800038a:	2300      	movs	r3, #0
 800038c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	LCD_D5.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 8000390:	2300      	movs	r3, #0
 8000392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	LCD_D6.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 8000396:	2300      	movs	r3, #0
 8000398:	77bb      	strb	r3, [r7, #30]
	LCD_D7.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 800039a:	2300      	movs	r3, #0
 800039c:	75bb      	strb	r3, [r7, #22]

	MCAL_GPIO_Init(&LCD_D4);
 800039e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff0a 	bl	80001bc <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_D5);
 80003a8:	f107 0320 	add.w	r3, r7, #32
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff05 	bl	80001bc <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_D6);
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff00 	bl	80001bc <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_D7);
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff fefb 	bl	80001bc <MCAL_GPIO_Init>

	/* Control Pins Configuration */
	LCD_EN.pGPIOx = LCD_CTRL_PORT;
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <HAL_LCD_LCDInit+0xdc>)
 80003c8:	60bb      	str	r3, [r7, #8]
	LCD_RS.pGPIOx = LCD_CTRL_PORT;
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <HAL_LCD_LCDInit+0xdc>)
 80003cc:	603b      	str	r3, [r7, #0]

	LCD_EN.GPIO_PinConfig.GPIO_PinNumber = LCD_EN_PIN;
 80003ce:	2308      	movs	r3, #8
 80003d0:	733b      	strb	r3, [r7, #12]
	LCD_RS.GPIO_PinConfig.GPIO_PinNumber = LCD_RS_PIN;
 80003d2:	230b      	movs	r3, #11
 80003d4:	713b      	strb	r3, [r7, #4]

	LCD_EN.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 80003d6:	2301      	movs	r3, #1
 80003d8:	737b      	strb	r3, [r7, #13]
	LCD_RS.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 80003da:	2301      	movs	r3, #1
 80003dc:	717b      	strb	r3, [r7, #5]

	LCD_EN.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 80003de:	2300      	movs	r3, #0
 80003e0:	73bb      	strb	r3, [r7, #14]
	LCD_RS.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	71bb      	strb	r3, [r7, #6]

	MCAL_GPIO_Init(&LCD_EN);
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff fee6 	bl	80001bc <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LCD_RS);
 80003f0:	463b      	mov	r3, r7
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff fee2 	bl	80001bc <MCAL_GPIO_Init>

//	Delay_vMsIn16MHz(1000); //500

	HAL_LCD_LCDWriteCommand(_4_BIT_MODE_COMAND_1);
 80003f8:	2033      	movs	r0, #51	; 0x33
 80003fa:	f000 f817 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(_4_BIT_MODE_COMAND_2);
 80003fe:	2032      	movs	r0, #50	; 0x32
 8000400:	f000 f814 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(_4_BIT_MODE_COMAND_3);
 8000404:	2028      	movs	r0, #40	; 0x28
 8000406:	f000 f811 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(DISPLAY_ON_CURSOR_OFF);
 800040a:	200c      	movs	r0, #12
 800040c:	f000 f80e 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(LCD_RETURN_HOME);
 8000410:	2002      	movs	r0, #2
 8000412:	f000 f80b 	bl	800042c <HAL_LCD_LCDWriteCommand>
	HAL_LCD_LCDWriteCommand(LCD_CLEAR);
 8000416:	2001      	movs	r0, #1
 8000418:	f000 f808 	bl	800042c <HAL_LCD_LCDWriteCommand>
#endif
}
 800041c:	bf00      	nop
 800041e:	3730      	adds	r7, #48	; 0x30
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40010c00 	.word	0x40010c00
 8000428:	40010800 	.word	0x40010800

0800042c <HAL_LCD_LCDWriteCommand>:
/*============================================   End_Function     ============================================*/
/*============================================   Start_Function   ============================================*/

void HAL_LCD_LCDWriteCommand(u8 u8Command)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]

	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
 8000436:	2200      	movs	r2, #0
 8000438:	210b      	movs	r1, #11
 800043a:	483d      	ldr	r0, [pc, #244]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 800043c:	f7ff ff62 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

#if LCD_MODE ==_8_BIT_MODE

#elif LCD_MODE ==_4_BIT_MODE

	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, GET_BIT(u8Command, 4) );
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	091b      	lsrs	r3, r3, #4
 8000444:	b2db      	uxtb	r3, r3
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	210f      	movs	r1, #15
 8000450:	4838      	ldr	r0, [pc, #224]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 8000452:	f7ff ff57 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, GET_BIT(u8Command, 5) );
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	095b      	lsrs	r3, r3, #5
 800045a:	b2db      	uxtb	r3, r3
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	210e      	movs	r1, #14
 8000466:	4833      	ldr	r0, [pc, #204]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 8000468:	f7ff ff4c 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, GET_BIT(u8Command, 6) );
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	099b      	lsrs	r3, r3, #6
 8000470:	b2db      	uxtb	r3, r3
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	b2db      	uxtb	r3, r3
 8000478:	461a      	mov	r2, r3
 800047a:	210d      	movs	r1, #13
 800047c:	482d      	ldr	r0, [pc, #180]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 800047e:	f7ff ff41 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA7_PIN, GET_BIT(u8Command, 7) );
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	09db      	lsrs	r3, r3, #7
 8000486:	b2db      	uxtb	r3, r3
 8000488:	461a      	mov	r2, r3
 800048a:	210c      	movs	r1, #12
 800048c:	4829      	ldr	r0, [pc, #164]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 800048e:	f7ff ff39 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, u8Command & (u8)(1 << 6) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, u8Command & (u8)(1 << 5) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, u8Command & (u8)(1 << 4) );


	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
 8000492:	2201      	movs	r2, #1
 8000494:	2108      	movs	r1, #8
 8000496:	4826      	ldr	r0, [pc, #152]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 8000498:	f7ff ff34 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

	Delay_vMsIn16MHz(1); //1
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff fe67 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2108      	movs	r1, #8
 80004a6:	4822      	ldr	r0, [pc, #136]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 80004a8:	f7ff ff2c 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

	Delay_vMsIn16MHz(1); //1
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff fe5f 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, GET_BIT(u8Command, 0) );
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	210f      	movs	r1, #15
 80004be:	481d      	ldr	r0, [pc, #116]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 80004c0:	f7ff ff20 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, GET_BIT(u8Command, 1) );
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	085b      	lsrs	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	461a      	mov	r2, r3
 80004d2:	210e      	movs	r1, #14
 80004d4:	4817      	ldr	r0, [pc, #92]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 80004d6:	f7ff ff15 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, GET_BIT(u8Command, 2) );
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	089b      	lsrs	r3, r3, #2
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	461a      	mov	r2, r3
 80004e8:	210d      	movs	r1, #13
 80004ea:	4812      	ldr	r0, [pc, #72]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 80004ec:	f7ff ff0a 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA7_PIN, GET_BIT(u8Command, 3) );
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	08db      	lsrs	r3, r3, #3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	461a      	mov	r2, r3
 80004fe:	210c      	movs	r1, #12
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <HAL_LCD_LCDWriteCommand+0x108>)
 8000502:	f7ff feff 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, u8Command & (u8)(1 << 2) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, u8Command & (u8)(1 << 1) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, u8Command & (u8)(1 << 0) );


	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 800050c:	f7ff fefa 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

	Delay_vMsIn16MHz(1); //1
 8000510:	2001      	movs	r0, #1
 8000512:	f7ff fe2d 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
 8000516:	2200      	movs	r2, #0
 8000518:	2108      	movs	r1, #8
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <HAL_LCD_LCDWriteCommand+0x104>)
 800051c:	f7ff fef2 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
#endif
	Delay_vMsIn16MHz(5); //5
 8000520:	2005      	movs	r0, #5
 8000522:	f7ff fe25 	bl	8000170 <Delay_vMsIn16MHz>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010800 	.word	0x40010800
 8000534:	40010c00 	.word	0x40010c00

08000538 <HAL_LCD_LCDWriteCharacter>:
/*============================================   End_Function     ============================================*/
/*============================================   Start_Function   ============================================*/

extern void HAL_LCD_LCDWriteCharacter(u8 u8Character)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	/* Data Register Select */
	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
 8000542:	2201      	movs	r2, #1
 8000544:	210b      	movs	r1, #11
 8000546:	483d      	ldr	r0, [pc, #244]	; (800063c <HAL_LCD_LCDWriteCharacter+0x104>)
 8000548:	f7ff fedc 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

#if LCD_MODE ==_8_BIT_MODE

#elif LCD_MODE ==_4_BIT_MODE

	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, GET_BIT(u8Character, 4) );
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	091b      	lsrs	r3, r3, #4
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	210f      	movs	r1, #15
 800055c:	4838      	ldr	r0, [pc, #224]	; (8000640 <HAL_LCD_LCDWriteCharacter+0x108>)
 800055e:	f7ff fed1 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, GET_BIT(u8Character, 5) );
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	095b      	lsrs	r3, r3, #5
 8000566:	b2db      	uxtb	r3, r3
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	210e      	movs	r1, #14
 8000572:	4833      	ldr	r0, [pc, #204]	; (8000640 <HAL_LCD_LCDWriteCharacter+0x108>)
 8000574:	f7ff fec6 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, GET_BIT(u8Character, 6) );
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	099b      	lsrs	r3, r3, #6
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	210d      	movs	r1, #13
 8000588:	482d      	ldr	r0, [pc, #180]	; (8000640 <HAL_LCD_LCDWriteCharacter+0x108>)
 800058a:	f7ff febb 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA7_PIN, GET_BIT(u8Character, 7) );
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	09db      	lsrs	r3, r3, #7
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	210c      	movs	r1, #12
 8000598:	4829      	ldr	r0, [pc, #164]	; (8000640 <HAL_LCD_LCDWriteCharacter+0x108>)
 800059a:	f7ff feb3 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, u8Character & (u8)(1 << 6) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, u8Character & (u8)(1 << 5) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, u8Character & (u8)(1 << 4) );

    /* H -> L : LCD Reads The Data */
	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
 800059e:	2201      	movs	r2, #1
 80005a0:	2108      	movs	r1, #8
 80005a2:	4826      	ldr	r0, [pc, #152]	; (800063c <HAL_LCD_LCDWriteCharacter+0x104>)
 80005a4:	f7ff feae 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	Delay_vMsIn16MHz(1); //1
 80005a8:	2001      	movs	r0, #1
 80005aa:	f7ff fde1 	bl	8000170 <Delay_vMsIn16MHz>
	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2108      	movs	r1, #8
 80005b2:	4822      	ldr	r0, [pc, #136]	; (800063c <HAL_LCD_LCDWriteCharacter+0x104>)
 80005b4:	f7ff fea6 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	Delay_vMsIn16MHz(1); //1
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff fdd9 	bl	8000170 <Delay_vMsIn16MHz>

	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, GET_BIT(u8Character, 0) );
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	210f      	movs	r1, #15
 80005ca:	481d      	ldr	r0, [pc, #116]	; (8000640 <HAL_LCD_LCDWriteCharacter+0x108>)
 80005cc:	f7ff fe9a 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, GET_BIT(u8Character, 1) );
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	085b      	lsrs	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	210e      	movs	r1, #14
 80005e0:	4817      	ldr	r0, [pc, #92]	; (8000640 <HAL_LCD_LCDWriteCharacter+0x108>)
 80005e2:	f7ff fe8f 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, GET_BIT(u8Character, 2) );
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	210d      	movs	r1, #13
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <HAL_LCD_LCDWriteCharacter+0x108>)
 80005f8:	f7ff fe84 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA7_PIN, GET_BIT(u8Character, 3) );
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	210c      	movs	r1, #12
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <HAL_LCD_LCDWriteCharacter+0x108>)
 800060e:	f7ff fe79 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA6_PIN, u8Character & (u8)(1 << 2) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA5_PIN, u8Character & (u8)(1 << 1) );
//	MCAL_GPIO_WriteOutputPin(LCD_DATA_PORT, LCD_DATA4_PIN, u8Character & (u8)(1 << 0) );

	/* H -> L : LCD Reads The Data */
	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
 8000612:	2201      	movs	r2, #1
 8000614:	2108      	movs	r1, #8
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <HAL_LCD_LCDWriteCharacter+0x104>)
 8000618:	f7ff fe74 	bl	8000304 <MCAL_GPIO_WriteOutputPin>
	Delay_vMsIn16MHz(1); //1
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff fda7 	bl	8000170 <Delay_vMsIn16MHz>
	MCAL_GPIO_WriteOutputPin(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
 8000622:	2200      	movs	r2, #0
 8000624:	2108      	movs	r1, #8
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <HAL_LCD_LCDWriteCharacter+0x104>)
 8000628:	f7ff fe6c 	bl	8000304 <MCAL_GPIO_WriteOutputPin>

#endif
	Delay_vMsIn16MHz(5); //5
 800062c:	2005      	movs	r0, #5
 800062e:	f7ff fd9f 	bl	8000170 <Delay_vMsIn16MHz>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010800 	.word	0x40010800
 8000640:	40010c00 	.word	0x40010c00

08000644 <HAL_LCD_LCDWriteString>:
/*============================================   End_Function     ============================================*/
/*============================================   Start_Function   ============================================*/

extern void HAL_LCD_LCDWriteString(u8* u8String)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	u8 u8Character;
	while(*u8String != '\0')
 800064c:	e009      	b.n	8000662 <HAL_LCD_LCDWriteString+0x1e>
	{
		u8Character = *u8String;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	73fb      	strb	r3, [r7, #15]
		HAL_LCD_LCDWriteCharacter(u8Character);
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff6e 	bl	8000538 <HAL_LCD_LCDWriteCharacter>
		u8String++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
	while(*u8String != '\0')
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f1      	bne.n	800064e <HAL_LCD_LCDWriteString+0xa>
	}
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <HAL_LCD_LCDClear>:
}
/*============================================   End_Function     ============================================*/
/*============================================   Start_Function   ============================================*/

extern void HAL_LCD_LCDClear(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_LCD_LCDWriteCommand(LCD_CLEAR);
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff fed7 	bl	800042c <HAL_LCD_LCDWriteCommand>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MCAL_NVIC_EnableInterrupt>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_NVIC_EnableInterrupt(u8 IRQNumber, u8 IRQStatus)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	if(IRQStatus == ENABLE)
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d11c      	bne.n	80006d4 <MCAL_NVIC_EnableInterrupt+0x50>
	{
		if(IRQNumber <= 31)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b1f      	cmp	r3, #31
 800069e:	d80a      	bhi.n	80006b6 <MCAL_NVIC_EnableInterrupt+0x32>
		{
			NVIC_ISER0 |= (1 << IRQNumber);
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MCAL_NVIC_EnableInterrupt+0x94>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	79fa      	ldrb	r2, [r7, #7]
 80006a6:	2101      	movs	r1, #1
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <MCAL_NVIC_EnableInterrupt+0x94>)
 80006b0:	430b      	orrs	r3, r1
 80006b2:	6013      	str	r3, [r2, #0]
		else if(IRQNumber <= 63)
		{
			NVIC_ICER1 |= (1 << (IRQNumber - 32) );
		}
	}
}
 80006b4:	e02a      	b.n	800070c <MCAL_NVIC_EnableInterrupt+0x88>
		else if(IRQNumber <= 63)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b3f      	cmp	r3, #63	; 0x3f
 80006ba:	d827      	bhi.n	800070c <MCAL_NVIC_EnableInterrupt+0x88>
			NVIC_ISER1 |= (1 << (IRQNumber - 32) );
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MCAL_NVIC_EnableInterrupt+0x98>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	79fa      	ldrb	r2, [r7, #7]
 80006c2:	3a20      	subs	r2, #32
 80006c4:	2101      	movs	r1, #1
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <MCAL_NVIC_EnableInterrupt+0x98>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	6013      	str	r3, [r2, #0]
}
 80006d2:	e01b      	b.n	800070c <MCAL_NVIC_EnableInterrupt+0x88>
		if(IRQNumber <= 31)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b1f      	cmp	r3, #31
 80006d8:	d80a      	bhi.n	80006f0 <MCAL_NVIC_EnableInterrupt+0x6c>
			NVIC_ICER0 |= (1 << IRQNumber);
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MCAL_NVIC_EnableInterrupt+0x9c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	2101      	movs	r1, #1
 80006e2:	fa01 f202 	lsl.w	r2, r1, r2
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <MCAL_NVIC_EnableInterrupt+0x9c>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	e00d      	b.n	800070c <MCAL_NVIC_EnableInterrupt+0x88>
		else if(IRQNumber <= 63)
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b3f      	cmp	r3, #63	; 0x3f
 80006f4:	d80a      	bhi.n	800070c <MCAL_NVIC_EnableInterrupt+0x88>
			NVIC_ICER1 |= (1 << (IRQNumber - 32) );
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MCAL_NVIC_EnableInterrupt+0xa0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	3a20      	subs	r2, #32
 80006fe:	2101      	movs	r1, #1
 8000700:	fa01 f202 	lsl.w	r2, r1, r2
 8000704:	4611      	mov	r1, r2
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <MCAL_NVIC_EnableInterrupt+0xa0>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000e104 	.word	0xe000e104
 8000720:	e000e180 	.word	0xe000e180
 8000724:	e000e184 	.word	0xe000e184

08000728 <USART_PeriClockControl>:
 *      Author: 7osensi
 */

#include <Stm32F103_USART.h>

void USART_PeriClockControl(USART_t *pUSARTx, u8 EnorDi) {
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx == MUSART1) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <USART_PeriClockControl+0xb0>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d112      	bne.n	8000762 <USART_PeriClockControl+0x3a>
		switch(EnorDi) {
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <USART_PeriClockControl+0x2c>
 8000742:	2b01      	cmp	r3, #1
 8000744:	d13b      	bne.n	80007be <USART_PeriClockControl+0x96>
			case ENABLE:
				USART1_PCLK_EN();
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <USART_PeriClockControl+0xb4>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a24      	ldr	r2, [pc, #144]	; (80007dc <USART_PeriClockControl+0xb4>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6193      	str	r3, [r2, #24]
				break;
 8000752:	e03b      	b.n	80007cc <USART_PeriClockControl+0xa4>
			case DISABLE:
				USART1_PCLK_DIS();
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <USART_PeriClockControl+0xb4>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4a20      	ldr	r2, [pc, #128]	; (80007dc <USART_PeriClockControl+0xb4>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	60d3      	str	r3, [r2, #12]
			default:
				break;
 8000760:	e02d      	b.n	80007be <USART_PeriClockControl+0x96>
		}
	}
	else if(pUSARTx == MUSART2) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <USART_PeriClockControl+0xb8>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d112      	bne.n	8000790 <USART_PeriClockControl+0x68>
		switch(EnorDi) {
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d008      	beq.n	8000782 <USART_PeriClockControl+0x5a>
 8000770:	2b01      	cmp	r3, #1
 8000772:	d126      	bne.n	80007c2 <USART_PeriClockControl+0x9a>
			case ENABLE:
				USART2_PCLK_EN();	break;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <USART_PeriClockControl+0xb4>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a18      	ldr	r2, [pc, #96]	; (80007dc <USART_PeriClockControl+0xb4>)
 800077a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	e024      	b.n	80007cc <USART_PeriClockControl+0xa4>
			case DISABLE:
				USART2_PCLK_DIS();	break;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <USART_PeriClockControl+0xb4>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <USART_PeriClockControl+0xb4>)
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	6113      	str	r3, [r2, #16]
 800078e:	e01d      	b.n	80007cc <USART_PeriClockControl+0xa4>
			default:				break;
		}
	}
	else if(pUSARTx == MUSART3) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <USART_PeriClockControl+0xbc>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d116      	bne.n	80007c6 <USART_PeriClockControl+0x9e>
		switch(EnorDi) {
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d008      	beq.n	80007b0 <USART_PeriClockControl+0x88>
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d113      	bne.n	80007ca <USART_PeriClockControl+0xa2>
			case ENABLE:
				USART3_PCLK_EN();	break;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <USART_PeriClockControl+0xb4>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <USART_PeriClockControl+0xb4>)
 80007a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	e00d      	b.n	80007cc <USART_PeriClockControl+0xa4>
			case DISABLE:
				USART3_PCLK_DIS();	break;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <USART_PeriClockControl+0xb4>)
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	4a09      	ldr	r2, [pc, #36]	; (80007dc <USART_PeriClockControl+0xb4>)
 80007b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ba:	6113      	str	r3, [r2, #16]
 80007bc:	e006      	b.n	80007cc <USART_PeriClockControl+0xa4>
				break;
 80007be:	bf00      	nop
 80007c0:	e004      	b.n	80007cc <USART_PeriClockControl+0xa4>
			default:				break;
 80007c2:	bf00      	nop
 80007c4:	e002      	b.n	80007cc <USART_PeriClockControl+0xa4>
			default:				break;
		}
	}
 80007c6:	bf00      	nop
 80007c8:	e000      	b.n	80007cc <USART_PeriClockControl+0xa4>
			default:				break;
 80007ca:	bf00      	nop
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40013800 	.word	0x40013800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40004400 	.word	0x40004400
 80007e4:	40004800 	.word	0x40004800

080007e8 <USART_PeriControl>:

void USART_PeriControl(USART_t *pUSARTx, u8 EnorDi) {
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d106      	bne.n	8000808 <USART_PeriControl+0x20>
		pUSARTx->USART_CR1 |= (1 << 13);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	60da      	str	r2, [r3, #12]
	}
	else if(EnorDi == DISABLE) {
		pUSARTx->USART_CR1 &= ~(1 << 13);
	}
}
 8000806:	e008      	b.n	800081a <USART_PeriControl+0x32>
	else if(EnorDi == DISABLE) {
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d105      	bne.n	800081a <USART_PeriControl+0x32>
		pUSARTx->USART_CR1 &= ~(1 << 13);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	60da      	str	r2, [r3, #12]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	u32 tempReg = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
	/* Enable clock  */
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2101      	movs	r1, #1
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff76 	bl	8000728 <USART_PeriClockControl>

	USART_PeriControl(pUSARTHandle->pUSARTx, ENABLE);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2101      	movs	r1, #1
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffd0 	bl	80007e8 <USART_PeriControl>

	/**************************************************************/
	/* USART_Mode  USART_Mode  USART_Mode  USART_Mode  USART_Mode */
	/**************************************************************/
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d104      	bne.n	800085c <USART_Init+0x38>
		tempReg |= (1 << 3); // TX only
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	e016      	b.n	800088a <USART_Init+0x66>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b01      	cmp	r3, #1
 8000864:	d104      	bne.n	8000870 <USART_Init+0x4c>
		tempReg |= (1 << 2); // RX only
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e00c      	b.n	800088a <USART_Init+0x66>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	791b      	ldrb	r3, [r3, #4]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b02      	cmp	r3, #2
 8000878:	d107      	bne.n	800088a <USART_Init+0x66>
		tempReg |= (1 << 3); // TX
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << 2); // RX
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	60fb      	str	r3, [r7, #12]
	}

	/**************************************************************/
	/* USART_WordLength  USART_WordLength  USART_WordLength       */
	/**************************************************************/
	if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_8BITS) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7b5b      	ldrb	r3, [r3, #13]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d104      	bne.n	800089e <USART_Init+0x7a>
		tempReg &= ~(1 << 12); // 8-bit word length
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e008      	b.n	80008b0 <USART_Init+0x8c>
	}
	else if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7b5b      	ldrb	r3, [r3, #13]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d103      	bne.n	80008b0 <USART_Init+0x8c>
		tempReg |= (1 << 12); // 9-bit word length
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ae:	60fb      	str	r3, [r7, #12]
	}

	/**************************************************************/
	/* USART_ParityControl  USART_ParityControl  		          */
	/**************************************************************/
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7b9b      	ldrb	r3, [r3, #14]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <USART_Init+0xa0>
		tempReg &= ~(1 << 10); // parity disable
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e01a      	b.n	80008fa <USART_Init+0xd6>
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7b9b      	ldrb	r3, [r3, #14]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <USART_Init+0xbc>
		tempReg |= (1 << 10); // parity enable
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d4:	60fb      	str	r3, [r7, #12]
		tempReg &= ~(1 << 9); // even parity
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e00c      	b.n	80008fa <USART_Init+0xd6>
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7b9b      	ldrb	r3, [r3, #14]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d107      	bne.n	80008fa <USART_Init+0xd6>
		tempReg |= (1 << 10); // parity enable
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f0:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << 9); // odd parity
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f8:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->USART_CR1 |= tempReg; // Initialize CR1 Register
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68d9      	ldr	r1, [r3, #12]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	430a      	orrs	r2, r1
 8000904:	60da      	str	r2, [r3, #12]

    tempReg=0; // Zeroing tempReg
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]

	/**************************************************************/
	/* USART_NoOfStopBits  USART_NoOfStopBits  USART_NoOfStopBits */
	/**************************************************************/
    if(pUSARTHandle->USART_Config.USART_NoOfStopBits == USART_STOPBITS_1) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7b1b      	ldrb	r3, [r3, #12]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d104      	bne.n	800091e <USART_Init+0xfa>
    	tempReg &= ~(1 << 12);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	e007      	b.n	800092e <USART_Init+0x10a>
    }
    else {
    	tempReg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << 12;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	7b1b      	ldrb	r3, [r3, #12]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	031b      	lsls	r3, r3, #12
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4313      	orrs	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
    }

    /* Programming CR2 register */
    pUSARTHandle->pUSARTx->USART_CR2 |= tempReg; // Initialize CR2 Register
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6919      	ldr	r1, [r3, #16]
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	430a      	orrs	r2, r1
 8000938:	611a      	str	r2, [r3, #16]

    tempReg=0; // Zeroing tempReg
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]

    /**************************************************************/
    /* USART_HWFlowControl  USART_HWFlowControl  				  */
    /**************************************************************/
    if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS) {
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7bdb      	ldrb	r3, [r3, #15]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b01      	cmp	r3, #1
 8000946:	d104      	bne.n	8000952 <USART_Init+0x12e>
        tempReg |= (1 << 9); // Enabling CTS Flow control
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e016      	b.n	8000980 <USART_Init+0x15c>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7bdb      	ldrb	r3, [r3, #15]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b02      	cmp	r3, #2
 800095a:	d104      	bne.n	8000966 <USART_Init+0x142>
        tempReg |= (1 << 10); // Enabling RTS Flow control
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e00c      	b.n	8000980 <USART_Init+0x15c>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS) {
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7bdb      	ldrb	r3, [r3, #15]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b03      	cmp	r3, #3
 800096e:	d107      	bne.n	8000980 <USART_Init+0x15c>
        /* Enabling both CTS and RTS Flow control */
        tempReg |= (1 << 10);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	60fb      	str	r3, [r7, #12]
        tempReg |= (1 << 9);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	60fb      	str	r3, [r7, #12]
    }
    pUSARTHandle->pUSARTx->USART_CR3 |= tempReg;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6959      	ldr	r1, [r3, #20]
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	430a      	orrs	r2, r1
 800098a:	615a      	str	r2, [r3, #20]

    USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4619      	mov	r1, r3
 8000996:	4610      	mov	r0, r2
 8000998:	f000 f80a 	bl	80009b0 <USART_SetBaudRate>

    /* Receive interrupt */
    pUSARTHandle->pUSARTx->USART_CR1 |= (1 << 5);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68da      	ldr	r2, [r3, #12]
 80009a2:	f042 0220 	orr.w	r2, r2, #32
 80009a6:	60da      	str	r2, [r3, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <USART_SetBaudRate>:

void USART_SetBaudRate(USART_t *pUSARTx, u32 BaudRate)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
    /* HSI is used as the clock source which is 8MHz */
    u16 usartdiv;

    usartdiv = (8000000 / BaudRate); // eg. BR = 9600 >> usartdiv = 52
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <USART_SetBaudRate+0x34>)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	81fb      	strh	r3, [r7, #14]


    /* Placing Mantissa part in appropriate bit position. USART_BRR */
    pUSARTx->USART_BRR = (((usartdiv / 16) << 4) | ((usartdiv % 16) << 0));
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	091b      	lsrs	r3, r3, #4
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	011a      	lsls	r2, r3, #4
 80009cc:	89fb      	ldrh	r3, [r7, #14]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	4313      	orrs	r3, r2
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	609a      	str	r2, [r3, #8]
}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	007a1200 	.word	0x007a1200

080009e8 <USART_SendByte>:

	*pRxBuffer = pUSARTx->USART_DR;
}

/* Receive data blocking mode */
void USART_SendByte(USART_t *pUSARTx, u8 *pRxBuffer) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	/* Wait for data to be send */
	while(!(pUSARTx->USART_SR >> 7 & 1));
 80009f2:	bf00      	nop
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	09db      	lsrs	r3, r3, #7
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f8      	beq.n	80009f4 <USART_SendByte+0xc>

	pUSARTx->USART_DR = *pRxBuffer;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	605a      	str	r2, [r3, #4]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <main>:

ringBuffer rb = {RINGBUF_SIZE, rb_buf, 0, 0};


int main(void)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af00      	add	r7, sp, #0
	/* Activate RCC for GPIOA, GPIOB, GPIOC */
	GPIOA_PCLK_EN();
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <main+0xc8>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <main+0xc8>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6193      	str	r3, [r2, #24]
	GPIOB_PCLK_EN();
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <main+0xc8>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <main+0xc8>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6193      	str	r3, [r2, #24]
	GPIOC_PCLK_EN();
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <main+0xc8>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a29      	ldr	r2, [pc, #164]	; (8000ae0 <main+0xc8>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6193      	str	r3, [r2, #24]
	/* AFIO Clock Enable */
	AFIO_PCLK_EN();
 8000a42:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <main+0xc8>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <main+0xc8>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6193      	str	r3, [r2, #24]

	/* Enable USART1 */
	MCAL_NVIC_EnableInterrupt(37, ENABLE);
 8000a4e:	2101      	movs	r1, #1
 8000a50:	2025      	movs	r0, #37	; 0x25
 8000a52:	f7ff fe17 	bl	8000684 <MCAL_NVIC_EnableInterrupt>

	/* USART1_TX */
	GPIO_PinConfig_t PA_A9 = {9, OUTPUT_50MHZ_MODE, ALT_FN_OUTPUT_PU_PL_MODE};
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <main+0xcc>)
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	8019      	strh	r1, [r3, #0]
 8000a62:	3302      	adds	r3, #2
 8000a64:	0c12      	lsrs	r2, r2, #16
 8000a66:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t PA9 = {MGPIOA, PA_A9};
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <main+0xd0>)
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	4611      	mov	r1, r2
 8000a78:	8019      	strh	r1, [r3, #0]
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	0c12      	lsrs	r2, r2, #16
 8000a7e:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&PA9);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fb99 	bl	80001bc <MCAL_GPIO_Init>

	/* USART1_RX */
	GPIO_PinConfig_t PA_A10 = {10, INPUT_MODE, FLOATING_INPUT};
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <main+0xd4>)
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	4611      	mov	r1, r2
 8000a94:	8019      	strh	r1, [r3, #0]
 8000a96:	3302      	adds	r3, #2
 8000a98:	0c12      	lsrs	r2, r2, #16
 8000a9a:	701a      	strb	r2, [r3, #0]
	GPIO_Handle_t PA10 = {MGPIOA, PA_A10};
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <main+0xd0>)
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	f107 0218 	add.w	r2, r7, #24
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	8019      	strh	r1, [r3, #0]
 8000aae:	3302      	adds	r3, #2
 8000ab0:	0c12      	lsrs	r2, r2, #16
 8000ab2:	701a      	strb	r2, [r3, #0]
	MCAL_GPIO_Init(&PA10);
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fb7f 	bl	80001bc <MCAL_GPIO_Init>

	/* 	u8 USART_Mode;u32 USART_Baud;u8 USART_NoOfStopBits;u8 USART_WordLength;
	u8 USART_ParityControl;u8 USART_HWFlowControl; */
	USART_Handle_t USART1H = {MUSART1, USART_MODE_TXRX, USART_STD_BAUD_9600, USART_STOPBITS_1, USART_WORDLEN_8BITS, USART_PARITY_DISABLE, USART_HW_FLOW_CTRL_NONE};
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <main+0xd8>)
 8000ac0:	463c      	mov	r4, r7
 8000ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	USART_Init(&USART1H);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff feaa 	bl	8000824 <USART_Init>

	HAL_LCD_LCDInit();
 8000ad0:	f7ff fc3c 	bl	800034c <HAL_LCD_LCDInit>

	HAL_LCD_LCDClear();
 8000ad4:	f7ff fdce 	bl	8000674 <HAL_LCD_LCDClear>
	HAL_LCD_LCDWriteString("Hello");
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <main+0xdc>)
 8000ada:	f7ff fdb3 	bl	8000644 <HAL_LCD_LCDWriteString>

    /* Loop forever */
	for(;;) {
 8000ade:	e7fe      	b.n	8000ade <main+0xc6>
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	08000c40 	.word	0x08000c40
 8000ae8:	40010800 	.word	0x40010800
 8000aec:	08000c44 	.word	0x08000c44
 8000af0:	08000c48 	.word	0x08000c48
 8000af4:	08000c38 	.word	0x08000c38

08000af8 <USART1_IRQHandler>:

	}
}

void USART1_IRQHandler(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	static int i = 0;
	if (MUSART1->USART_SR >> 5 & 1) {
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <USART1_IRQHandler+0x78>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	095b      	lsrs	r3, r3, #5
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d030      	beq.n	8000b6c <USART1_IRQHandler+0x74>
		Buf = MUSART1->USART_DR;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <USART1_IRQHandler+0x78>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <USART1_IRQHandler+0x7c>)
 8000b12:	701a      	strb	r2, [r3, #0]
		ringbuf_write(rb, Buf);
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <USART1_IRQHandler+0x80>)
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <USART1_IRQHandler+0x80>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <USART1_IRQHandler+0x7c>)
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <USART1_IRQHandler+0x80>)
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <USART1_IRQHandler+0x80>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d303      	bcc.n	8000b3c <USART1_IRQHandler+0x44>
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <USART1_IRQHandler+0x80>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	e004      	b.n	8000b46 <USART1_IRQHandler+0x4e>
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <USART1_IRQHandler+0x80>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <USART1_IRQHandler+0x80>)
 8000b44:	60d3      	str	r3, [r2, #12]
		USART_SendByte(MUSART1, &Buf);
 8000b46:	490b      	ldr	r1, [pc, #44]	; (8000b74 <USART1_IRQHandler+0x7c>)
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <USART1_IRQHandler+0x78>)
 8000b4a:	f7ff ff4d 	bl	80009e8 <USART_SendByte>
		HAL_LCD_LCDClear();
 8000b4e:	f7ff fd91 	bl	8000674 <HAL_LCD_LCDClear>
		HAL_LCD_LCDWriteCharacter(rb_buf[++i]);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <USART1_IRQHandler+0x84>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <USART1_IRQHandler+0x84>)
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <USART1_IRQHandler+0x84>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <USART1_IRQHandler+0x88>)
 8000b62:	5cd3      	ldrb	r3, [r2, r3]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fce6 	bl	8000538 <HAL_LCD_LCDWriteCharacter>
//		HAL_LCD_LCDWriteCharacter(Buf);
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40013800 	.word	0x40013800
 8000b74:	2000002c 	.word	0x2000002c
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	200000b4 	.word	0x200000b4
 8000b80:	20000030 	.word	0x20000030

08000b84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b88:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb2:	f000 f811 	bl	8000bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff ff2f 	bl	8000a18 <main>

08000bba <LoopForever>:

LoopForever:
  b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   r0, =_estack
 8000bbc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bc8:	08000c60 	.word	0x08000c60
  ldr r2, =_sbss
 8000bcc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bd0:	200000b8 	.word	0x200000b8

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <__libc_init_array>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	2600      	movs	r6, #0
 8000bdc:	4d0c      	ldr	r5, [pc, #48]	; (8000c10 <__libc_init_array+0x38>)
 8000bde:	4c0d      	ldr	r4, [pc, #52]	; (8000c14 <__libc_init_array+0x3c>)
 8000be0:	1b64      	subs	r4, r4, r5
 8000be2:	10a4      	asrs	r4, r4, #2
 8000be4:	42a6      	cmp	r6, r4
 8000be6:	d109      	bne.n	8000bfc <__libc_init_array+0x24>
 8000be8:	f000 f81a 	bl	8000c20 <_init>
 8000bec:	2600      	movs	r6, #0
 8000bee:	4d0a      	ldr	r5, [pc, #40]	; (8000c18 <__libc_init_array+0x40>)
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	; (8000c1c <__libc_init_array+0x44>)
 8000bf2:	1b64      	subs	r4, r4, r5
 8000bf4:	10a4      	asrs	r4, r4, #2
 8000bf6:	42a6      	cmp	r6, r4
 8000bf8:	d105      	bne.n	8000c06 <__libc_init_array+0x2e>
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c00:	4798      	blx	r3
 8000c02:	3601      	adds	r6, #1
 8000c04:	e7ee      	b.n	8000be4 <__libc_init_array+0xc>
 8000c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c0a:	4798      	blx	r3
 8000c0c:	3601      	adds	r6, #1
 8000c0e:	e7f2      	b.n	8000bf6 <__libc_init_array+0x1e>
 8000c10:	08000c58 	.word	0x08000c58
 8000c14:	08000c58 	.word	0x08000c58
 8000c18:	08000c58 	.word	0x08000c58
 8000c1c:	08000c5c 	.word	0x08000c5c

08000c20 <_init>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	bf00      	nop
 8000c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c26:	bc08      	pop	{r3}
 8000c28:	469e      	mov	lr, r3
 8000c2a:	4770      	bx	lr

08000c2c <_fini>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	bf00      	nop
 8000c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c32:	bc08      	pop	{r3}
 8000c34:	469e      	mov	lr, r3
 8000c36:	4770      	bx	lr
